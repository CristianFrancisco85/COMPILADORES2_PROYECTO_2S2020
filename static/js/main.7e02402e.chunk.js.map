{"version":3,"sources":["serviceWorker.js","scripts/mainScript.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","CodeTxt","print","text","event","alert","Editor","className","autoFocus","onChange","editor","data","value","options","theme","mode","matchBrackets","lineNumbers","Viewer","Console","BtnTranslate","props","onClick","BtnRun","BtnReports","MainComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBKC,G,+CAAQ,MAGZ,SAASC,EAAMC,EAAKC,GACvBC,MAAM,aAAaJ,GCyBvB,SAASK,IAEP,OACG,yBAAKC,UAAU,wBACd,uCACD,kBAAC,eAAD,CAAYC,WAAW,EAAMC,SAAU,SAACC,EAAQC,EAAMC,GD1BvDX,EC0B0EW,GACvEC,QAAS,CACPC,MAAO,UACPC,KAAM,aACNC,eAAe,EACfC,aAAa,MAMtB,SAASC,IAER,OACG,yBAAKX,UAAU,wBACf,sCACA,kBAAC,eAAD,CAAYC,WAAW,EACpBK,QAAS,CACPC,MAAO,UACPC,KAAM,aACNC,eAAe,EACfC,aAAa,MAMrB,SAASE,IAER,OACG,yBAAKZ,UAAU,wBACd,uCACD,kBAAC,eAAD,CAAYC,WAAW,EACrBK,QAAS,CACPC,MAAO,UACPG,aAAa,MAQtB,SAASG,EAAaC,GACpB,OACE,4BAAQd,UAAU,4BAA4Be,QAASpB,GAAvD,aAKJ,SAASqB,IAEP,OACE,4BAAQhB,UAAU,wCAAwCe,QAASpB,GAAnE,aAKJ,SAASsB,IAEP,OACE,4BAAQjB,UAAU,sCAAsCe,QAASpB,GAAjE,aAOJ,SAASuB,IAEP,OAEE,yBAAKlB,UAAU,uBAEb,yBAAKA,UAAU,oDACb,kBAACa,EAAD,MACA,kBAACG,EAAD,MACA,kBAACC,EAAD,OAGF,yBAAKjB,UAAU,6BACb,kBAAC,EAAD,MACA,kBAACW,EAAD,OAGF,yBAAKX,UAAU,6BACb,kBAACY,EAAD,QAWRO,IAASC,OACP,kBAACF,EAAD,MAAiBG,SAASC,eAAe,SFHrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.7e02402e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//Variable Globales\n\nexport let CodeTxt=\"ds\";\nlet Editor;\n\nexport function print(text,event){\n    alert(\"Codigo: \\n\"+CodeTxt);\n}\n\nexport function setCode(text){\n    CodeTxt=text\n}\n\nexport function setViewer(editor){\n   Editor=editor\n}\n\n\n","//Importaciones Default\nimport React, {useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Importaciones de CodeMirror\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/theme/darcula.css';\nimport 'codemirror/theme/lucario.css';\nimport 'codemirror/lib/codemirror.css';\n\n//Importaciones de Estilos en General\nimport  \"./styles/styles.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n//Importaciones de funciones de JS\nimport {print} from './scripts/mainScript.js'\nimport {setCode} from './scripts/mainScript.js'\nimport {setViewer} from './scripts/mainScript.js'\nimport {CodeTxt} from './scripts/mainScript.js'\n\n\n\n//Creacion de areas de codigo\n\nfunction Editor(){ \n\n  return (\n     <div className=\"col-md-6 divcontent \">\n      <h3>Entrada</h3>\n     <CodeMirror autoFocus={true} onChange={(editor, data, value) => {setCode(value)}} \n       options={{\n         theme: 'darcula',\n         mode: 'javascript',\n         matchBrackets: true,\n         lineNumbers: true,}\n       }\n     />\n   </div>\n)}\n\nfunction Viewer(){\n  \n return (\n    <div className=\"col-md-6 divcontent \" >\n    <h3>Salida</h3>\n    <CodeMirror autoFocus={true}  \n       options={{\n         theme: 'darcula',\n         mode: 'javascript',\n         matchBrackets: true,\n         lineNumbers: true,}\n       }\n     />\n  </div>\n )} \n\n function Console(){ \n\n  return (\n     <div className=\"col-md-12 divcontent\">\n      <h3>Consola</h3>\n     <CodeMirror autoFocus={true} \n       options={{\n         theme: 'lucario',\n         lineNumbers: true,}\n       }\n     />\n   </div>\n)}\n\n\n//Creacion de Botones\nfunction BtnTranslate(props){\n  return(\n    <button className=\"btn btn-warning col-md-2 \" onClick={print} >Traducir </button>\n  )\n\n}\n\nfunction BtnRun(){\n\n  return(\n    <button className=\"btn btn-success col-md-2 offset-md-1 \" onClick={print} >Ejecutar </button>\n  )\n\n}\n\nfunction BtnReports(){\n\n  return(\n    <button className=\"btn btn-danger col-md-2 offset-md-1\" onClick={print} >Reportes </button>\n  )\n\n}\n\n//Componente Principal\n\nfunction MainComponent(){\n\n  return (\n\n    <div className=\"container col-md-12\">\n      \n      <div className=\" row justify-content-center col-md-12 divcontent\">\n        <BtnTranslate ></BtnTranslate>\n        <BtnRun ></BtnRun>\n        <BtnReports ></BtnReports>\n      </div>\n      \n      <div className=\" row col-md-12 divcontent\">\n        <Editor></Editor>\n        <Viewer></Viewer>\n      </div>\n\n      <div className=\" row col-md-12 divcontent\">\n        <Console></Console>\n      </div>\n\n    </div>\n    \n  );\n}\n\n\n\n\nReactDOM.render(\n  <MainComponent/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}