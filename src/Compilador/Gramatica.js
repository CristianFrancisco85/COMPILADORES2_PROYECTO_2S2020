/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,19],$V2=[1,20],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,22],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,26],$Vc=[1,30],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[2,5,23,26,30,32,33,34,38,73,74,75,76,77,80,85,86,87],$Vh=[1,39],$Vi=[1,38],$Vj=[1,41],$Vk=[1,49],$Vl=[1,48],$Vm=[1,47],$Vn=[1,50],$Vo=[1,51],$Vp=[1,53],$Vq=[1,65],$Vr=[1,68],$Vs=[1,78],$Vt=[1,77],$Vu=[1,66],$Vv=[1,67],$Vw=[1,69],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[18,25,38,39,41,47,51,52,53,54,55,56,61,62,67,68,69,70,71,72,89,90],$VC=[1,94],$VD=[1,95],$VE=[18,25,39,89,90],$VF=[1,113],$VG=[1,114],$VH=[1,115],$VI=[1,116],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[1,121],$VO=[1,122],$VP=[1,123],$VQ=[1,124],$VR=[1,125],$VS=[1,126],$VT=[18,25,27,35,38,39,41,47,51,52,53,54,55,56,61,62,67,68,69,70,71,72,89,90],$VU=[1,143],$VV=[25,39],$VW=[2,5,23,24,26,30,32,33,34,36,38,40,51,57,58,63,64,65,66,73,74,75,76,77,80,85,86,87],$VX=[1,154],$VY=[1,150],$VZ=[1,151],$V_=[1,152],$V$=[1,153],$V01=[39,41],$V11=[2,5,23,24,26,30,32,33,34,36,38,40,51,57,58,63,64,65,66,73,74,75,76,77,80,85,86,87,89,90],$V21=[1,197],$V31=[18,25,35,38,39,89,90],$V41=[89,90],$V51=[18,25,38,39,41,47,51,52,61,62,67,68,69,70,71,72,89,90],$V61=[18,25,38,39,41,47,51,52,53,54,56,61,62,67,68,69,70,71,72,89,90],$V71=[18,25,38,39,41,47,61,62,67,68,69,70,71,72,89,90],$V81=[18,25,38,39,41,47,61,62,71,72,89,90],$V91=[1,262],$Va1=[1,263],$Vb1=[18,38,39],$Vc1=[1,277],$Vd1=[38,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"instrucciones":6,"instruccion":7,"asignacion":8,"declaracionAsignacion":9,"bloqueIf":10,"bloqueWhile":11,"bloqueDoWhile":12,"bloqueFor":13,"bloqueForOf":14,"bloqueForIn":15,"bloqueSwitch":16,"atributos":17,"PUNTOYCOMA":18,"llamadaFuncion":19,"incremento_decremento":20,"sentenciasTransferencia":21,"declaracionFuncion":22,"GRAFICAR":23,"PARIZQ":24,"PARDER":25,"CONSOLE":26,"PUNTO":27,"LOG":28,"expresion":29,"LET":30,"listaID":31,"CONST":32,"TYPE":33,"ID":34,"IGUAL":35,"LLAVIZQ":36,"listaAttrib":37,"LLAVDER":38,"COMA":39,"CORIZQ":40,"CORDER":41,"tipo":42,"STRING":43,"NUMBER":44,"BOOLEAN":45,"VOID":46,"DOSPUNTOS":47,"listaArr":48,"listaVal":49,"listaParam":50,"OPMENOS":51,"OPMAS":52,"OPDIVISION":53,"OPMOD":54,"OPCIRCU":55,"OPMULTI":56,"NUMERO":57,"CADENA":58,"DECREMENTO":59,"INCREMENTO":60,"AND":61,"OR":62,"NOT":63,"TRUE":64,"FALSE":65,"NULL":66,"MAYOR":67,"MENOR":68,"MAYORIG":69,"MENORIG":70,"DIGUAL":71,"NIGUAL":72,"BREAK":73,"CONTINUE":74,"RETURN":75,"FUNCTION":76,"IF":77,"bloqueElse":78,"ELSE":79,"SWITCH":80,"casos":81,"caso":82,"CASE":83,"DEFAULT":84,"WHILE":85,"DO":86,"FOR":87,"declaracionAsignacionCiclos":88,"OF":89,"IN":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PUNTOYCOMA",23:"GRAFICAR",24:"PARIZQ",25:"PARDER",26:"CONSOLE",27:"PUNTO",28:"LOG",30:"LET",32:"CONST",33:"TYPE",34:"ID",35:"IGUAL",36:"LLAVIZQ",38:"LLAVDER",39:"COMA",40:"CORIZQ",41:"CORDER",43:"STRING",44:"NUMBER",45:"BOOLEAN",46:"VOID",47:"DOSPUNTOS",51:"OPMENOS",52:"OPMAS",53:"OPDIVISION",54:"OPMOD",55:"OPCIRCU",56:"OPMULTI",57:"NUMERO",58:"CADENA",59:"DECREMENTO",60:"INCREMENTO",61:"AND",62:"OR",63:"NOT",64:"TRUE",65:"FALSE",66:"NULL",67:"MAYOR",68:"MENOR",69:"MAYORIG",70:"MENORIG",71:"DIGUAL",72:"NIGUAL",73:"BREAK",74:"CONTINUE",75:"RETURN",76:"FUNCTION",77:"IF",79:"ELSE",80:"SWITCH",83:"CASE",84:"DEFAULT",85:"WHILE",86:"DO",87:"FOR",89:"OF",90:"IN"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,4],[7,7],[7,2],[9,3],[9,3],[9,6],[9,7],[9,7],[8,4],[8,7],[8,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,3],[42,3],[42,3],[42,3],[42,3],[31,5],[31,3],[31,3],[31,1],[31,7],[31,5],[31,5],[31,3],[48,3],[48,1],[37,5],[37,5],[37,3],[49,5],[49,3],[50,3],[50,1],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,1],[29,2],[29,2],[29,1],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,3],[29,3],[29,4],[29,4],[29,4],[20,2],[20,2],[17,3],[17,6],[17,3],[17,3],[17,6],[17,3],[17,6],[17,9],[17,6],[17,3],[17,6],[17,3],[19,4],[19,3],[21,2],[21,2],[21,2],[21,3],[22,8],[10,7],[10,8],[10,6],[10,7],[78,4],[78,8],[78,9],[78,3],[78,7],[78,8],[16,7],[81,2],[81,1],[82,6],[82,5],[82,5],[82,4],[11,7],[11,6],[12,8],[12,7],[13,10],[13,10],[13,9],[13,9],[14,9],[14,9],[15,9],[15,9],[88,2],[88,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
Manejo_Errores.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]);/*$$[$0-1].push($$[$0].F);this.$.F=$$[$0-1].F;*/this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]]; /*this.$.F=[$$[$0].F];*/
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 17: case 34:
this.$=$$[$0]
break;
case 14: case 15: case 16:
this.$=$$[$0-1]
break;
case 18:
this.$.F=$$[$0].F;console.log($$[$0].F);console.log($$[$0])
break;
case 19:
this.$=AST_Tools.nuevoGraficar();
break;
case 20:
this.$=AST_Tools.nuevaSalida($$[$0-2])
break;
case 21:
Manejo_Errores.addErrorSintactico(yytext,this._$.first_line,this._$.first_column);this.$=undefined; 
break;
case 22:
this.$=AST_Tools.declaracion_let($$[$0-1])
break;
case 23:
this.$=AST_Tools.declaracion_const($$[$0-1])
break;
case 24:
this.$=AST_Tools.declaracion_type($$[$0-4],$$[$0-1])
break;
case 25: case 26:
this.$=AST_Tools.declaracion_type($$[$0-5],$$[$0-2])
break;
case 27: case 29:
this.$=AST_Tools.asignacion($$[$0-3],$$[$0-1])
break;
case 28:
this.$=AST_Tools.asignacionArr($$[$0-6],$$[$0-4],$$[$0-1])
break;
case 30:
this.$=Tipo_Valor.STRING
break;
case 31:
this.$=Tipo_Valor.NUMBER
break;
case 32:
this.$=Tipo_Valor.BOOLEAN
break;
case 33:
this.$=Tipo_Valor.VOID
break;
case 35:
this.$=Tipo_Valor.STRING_ARR
break;
case 36:
this.$=Tipo_Valor.NUMBER_ARR
break;
case 37:
this.$=Tipo_Valor.BOOLEAN_ARR
break;
case 38:
this.$=Tipo_Valor.VOID_ARR
break;
case 39:
this.$=($$[$0-2]+"_ARR")
break;
case 40:
$$[$0-4].push(AST_Tools.newID($$[$0-2],$$[$0],undefined));
break;
case 41:
$$[$0-2].push(AST_Tools.newID($$[$0],undefined,undefined));
break;
case 42:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0],undefined)
break;
case 43:
this.$=AST_Tools.newIDList($$[$0],undefined,undefined)
break;
case 44:
$$[$0-6].push(AST_Tools.newID($$[$0-4],$$[$0-2],$$[$0]));
break;
case 45:
$$[$0-4].push(AST_Tools.newID($$[$0-2],undefined,$$[$0]));
break;
case 46:
this.$=AST_Tools.newIDList($$[$0-4],$$[$0-2],$$[$0])
break;
case 47:
this.$=AST_Tools.newIDList($$[$0-2],undefined,$$[$0])
break;
case 48:
$$[$0-2].push(AST_Tools.newArrVal($$[$0]))
break;
case 49:
this.$=AST_Tools.newArrValList($$[$0])
break;
case 50: case 51:
$$[$0-4].push(AST_Tools.newAttrib($$[$0-2],$$[$0]))
break;
case 52:
this.$=AST_Tools.newAttribList($$[$0-2],$$[$0])
break;
case 53:
$$[$0-4].push(AST_Tools.newTypeVal($$[$0-2],$$[$0]))
break;
case 54:
this.$=AST_Tools.newTypeValList($$[$0-2],$$[$0])
break;
case 55:
$$[$0-2].push(AST_Tools.newParam($$[$0]))
break;
case 56:
this.$=AST_Tools.newParamList($$[$0])
break;
case 57:
 this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NEGACION); 
break;
case 59:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 60:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 61:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 62:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 63:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 64:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 65:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMBER); 
break;
case 66:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 67:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.STRING); 
break;
case 68:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.DECREMENTO); 
break;
case 69:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.INCREMENTO); 
break;
case 70: case 83: case 84:
 this.$ = $$[$0]
break;
case 71:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 72:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 73:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NOT);
break;
case 74: case 75:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.BOOLEAN);
break;
case 76:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.NULL);
break;
case 77:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 78:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 79:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 80:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 81:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 82:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 85: case 86:
 this.$ = $$[$0-1]
break;
case 87: case 88:
 this.$ = $$[$0-2]
break;
case 89:
 this.$ = AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR)
break;
case 90:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.DECREMENTO); 
break;
case 91:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.INCREMENTO); 
break;
case 92: case 94: case 95: case 97: case 101: case 103:
 this.$ = AST_Tools.operacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 93: case 96: case 102:
 this.$ = AST_Tools.operacionBinaria($$[$0-5],AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 98: case 100:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-5],$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 99:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-5],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 104:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 105:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 106:
this.$=AST_Tools.nuevoBreak();
break;
case 107:
this.$=AST_Tools.nuevoContinue();
break;
case 108:
this.$=AST_Tools.nuevoReturn(undefined);
break;
case 109:
this.$=AST_Tools.nuevoReturn($$[$0-1]);
break;
case 110:
this.$=AST_Tools.nuevaFuncion(undefined,$$[$0-6],$$[$0-4],$$[$0-1])
break;
case 111:
this.$= AST_Tools.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 112:
this.$= AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])
break;
case 113:
this.$= AST_Tools.nuevoIf($$[$0-3],undefined);
break;
case 114:
this.$= AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])
break;
case 115:
this.$= $$[$0-1]
break;
case 116:
this.$= [AST_Tools.nuevoIf($$[$0-4],$$[$0-1])]
break;
case 117:
this.$= [AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])]
break;
case 118:
this.$= undefined
break;
case 119:
this.$= [AST_Tools.nuevoIf($$[$0-3],undefined)]
break;
case 120:
this.$= [AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])]
break;
case 121:
this.$=AST_Tools.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 122:
$$[$0-1].push($$[$0]);
break;
case 123:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 124:
this.$=AST_Tools.nuevoCaso($$[$0-4],$$[$0-1]);
break;
case 125:
this.$=AST_Tools.nuevoCasoDefault($$[$0-1]);
break;
case 126:
this.$=AST_Tools.nuevoCaso($$[$0-3],undefined);
break;
case 127:
this.$=AST_Tools.nuevoCasoDefault(undefined);
break;
case 128:
this.$= AST_Tools.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 129:
this.$= AST_Tools.nuevoWhile($$[$0-3],undefined);
break;
case 130:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 131:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],undefined);
break;
case 132: case 133:
this.$=AST_Tools.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 134: case 135:
this.$=AST_Tools.nuevoFor($$[$0-6],$$[$0-5],$$[$0-3],undefined);
break;
case 136: case 137:
this.$=AST_Tools.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 138: case 139:
this.$=AST_Tools.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 140:
this.$=AST_Tools.declaracion_let($$[$0])
break;
case 141:
this.$=AST_Tools.asignacion($$[$0-2],$$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{1:[3]},{5:[1,35]},{2:$V0,5:[2,2],7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{18:[1,37],27:$Vh,35:$Vi},{18:[1,40],27:$Vj},{18:[1,42]},o($Vg,[2,17]),o($Vg,[2,18]),{24:[1,43]},{27:[1,44]},{18:[1,45]},{24:$Vk,27:$Vl,35:[1,46],40:$Vm,59:$Vn,60:$Vo},{31:52,34:$Vp},{31:54,34:$Vp},{34:[1,55]},{24:[1,56]},{24:[1,57]},{36:[1,58]},{24:[1,59]},{24:[1,60]},{18:[1,61]},{18:[1,62]},{17:76,18:[1,63],19:75,20:70,24:$Vq,29:64,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{34:[1,79]},{1:[2,1]},o($Vg,[2,3]),o($Vg,[2,14]),{17:76,19:75,20:70,24:$Vq,29:80,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{19:82,34:[1,81]},o($Vg,[2,15]),{19:84,34:[1,83]},o($Vg,[2,16]),{25:[1,85]},{28:[1,86]},o($Vg,[2,21]),{17:76,19:75,20:70,24:$Vq,29:87,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:88,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{19:90,34:[1,89]},{17:76,19:75,20:70,24:$Vq,25:[1,92],29:93,34:$Vr,36:$Vs,40:$Vt,50:91,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VB,[2,90]),o($VB,[2,91]),{18:$VC,39:$VD},o($VE,[2,43],{35:[1,97],47:[1,96]}),{18:[1,98],39:$VD},{35:[1,99]},{17:76,19:75,20:70,24:$Vq,29:100,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:101,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{2:$V0,6:102,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,103],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{8:104,9:105,17:108,19:110,30:[1,109],32:$V4,33:$V5,34:[1,107],88:106},{17:76,19:75,20:70,24:$Vq,29:111,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($Vg,[2,106]),o($Vg,[2,107]),o($Vg,[2,108]),{18:[1,112],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:76,19:75,20:70,24:$Vq,29:127,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:128,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VB,[2,65],{59:[1,129],60:[1,130]}),o($VB,[2,66],{24:$Vk,27:$Vl,40:[1,131],59:$Vn,60:$Vo}),o($VB,[2,67]),o($VB,[2,70]),{17:76,19:75,20:70,24:$Vq,29:132,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VB,[2,74]),o($VB,[2,75]),o($VB,[2,76]),o($VB,[2,83],{27:$Vj}),o($VB,[2,84],{27:$Vh}),{17:76,19:75,20:70,24:$Vq,29:134,34:$Vr,36:$Vs,40:$Vt,48:133,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{34:[1,136],49:135},{24:[1,137]},{18:[1,138],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VT,[2,92],{24:$Vk,40:[1,139]}),o($VT,[2,94]),o($VT,[2,101],{24:$Vk,40:[1,140]}),o($VT,[2,103]),{18:[1,141]},{24:[1,142]},{18:$VU,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{41:[1,144],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VT,[2,95],{24:$Vk,40:[1,145]}),o($VT,[2,97]),{25:[1,146],39:[1,147]},o($VT,[2,105]),o($VV,[2,56],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($VW,[2,22]),{34:[1,148]},{34:$VX,42:149,43:$VY,44:$VZ,45:$V_,46:$V$},{17:76,19:75,20:70,24:$Vq,29:155,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VW,[2,23]),{36:[1,156]},{25:[1,157],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{25:[1,158],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,159],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{85:[1,160]},{17:76,19:75,20:70,24:$Vq,29:161,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,89:[1,162],90:[1,163]},{17:76,19:75,20:70,24:$Vq,29:164,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{89:[1,165],90:[1,166]},{24:$Vk,27:$Vl,35:[1,167],40:$Vm},{27:$Vh,35:$Vi},{31:168,34:$Vp},{27:$Vj},{25:[1,169],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($Vg,[2,109]),{17:76,19:75,20:70,24:$Vq,29:170,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:171,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:172,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:173,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:174,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:175,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:176,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:177,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:178,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:179,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:180,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:181,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:182,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:183,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{25:[1,184],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VB,[2,58]),o($VB,[2,68]),o($VB,[2,69]),{17:76,19:75,20:70,24:$Vq,29:185,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VB,[2,73]),{39:[1,187],41:[1,186]},o($V01,[2,49],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{18:[1,190],38:[1,188],39:[1,189]},{47:[1,191]},{31:192,34:$Vp},o($V11,[2,29]),{17:76,19:75,20:70,24:$Vq,29:193,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:194,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($Vg,[2,19]),{17:76,19:75,20:70,24:$Vq,29:195,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($V11,[2,27]),{27:$V21,35:[1,196]},{17:76,19:75,20:70,24:$Vq,29:198,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VT,[2,104]),{17:76,19:75,20:70,24:$Vq,29:199,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VE,[2,41],{35:[1,201],47:[1,200]}),o($VE,[2,42],{35:[1,202]}),o($V31,[2,30],{40:[1,203]}),o($V31,[2,31],{40:[1,204]}),o($V31,[2,32],{40:[1,205]}),o($V31,[2,33],{40:[1,206]}),o($V31,[2,34],{40:[1,207]}),o($VE,[2,47],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{34:[1,209],37:208},{36:[1,210]},{36:[1,211]},{85:[1,212]},{24:[1,213]},{18:[1,214],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:76,19:75,20:70,24:$Vq,29:215,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:216,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{18:[1,217],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:76,19:75,20:70,24:$Vq,29:218,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:219,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:220,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($V41,[2,140],{18:$VC,39:$VD}),{36:[1,221]},o($V51,[2,59],{53:$VH,54:$VI,55:$VJ,56:$VK}),o($V51,[2,60],{53:$VH,54:$VI,55:$VJ,56:$VK}),o($V61,[2,61],{55:$VJ}),o($V61,[2,62],{55:$VJ}),o($VB,[2,63]),o($V61,[2,64],{55:$VJ}),o([18,25,38,39,41,47,61,62,89,90],[2,71],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o([18,25,38,39,41,47,62,89,90],[2,72],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V71,[2,77],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($V71,[2,78],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($V71,[2,79],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($V71,[2,80],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK}),o($V81,[2,81],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,67:$VN,68:$VO,69:$VP,70:$VQ}),o($V81,[2,82],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,67:$VN,68:$VO,69:$VP,70:$VQ}),o($VB,[2,57]),{41:[1,222],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VB,[2,85]),{17:76,19:75,20:70,24:$Vq,29:223,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VB,[2,86]),{34:[1,225],38:[1,224]},{38:[1,226]},{17:76,19:75,20:70,24:$Vq,29:227,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{25:[1,228],39:$VD},{41:[1,229],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{41:[1,230],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{25:[1,231],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:76,19:75,20:70,24:$Vq,29:232,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{19:234,34:[1,233]},{41:[1,235],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VV,[2,55],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{34:$VX,42:236,43:$VY,44:$VZ,45:$V_,46:$V$},{17:76,19:75,20:70,24:$Vq,29:237,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:238,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{41:[1,239]},{41:[1,240]},{41:[1,241]},{41:[1,242]},{41:[1,243]},{18:[1,246],38:[1,244],39:[1,245]},{47:[1,247]},{2:$V0,6:248,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,249],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,6:250,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,251],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{24:[1,252]},{17:76,19:75,20:70,24:$Vq,29:253,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:254,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{25:[1,255],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{25:[1,256],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:76,19:75,20:70,24:$Vq,29:257,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{25:[1,258],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{25:[1,259],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($V41,[2,141],{18:$VU,51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{81:260,82:261,83:$V91,84:$Va1},o($VB,[2,89],{27:$V21}),o($V01,[2,48],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($VB,[2,87]),{47:[1,264]},o($VB,[2,88]),o($Vb1,[2,54],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{36:[1,265]},o($VT,[2,93]),o($VT,[2,102]),{18:[1,266]},{18:[1,267],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VT,[2,98],{24:$Vk,40:[1,268]}),o($VT,[2,100]),o($VT,[2,96]),o($VE,[2,40],{35:[1,269]}),o($VE,[2,45],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($VE,[2,46],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V31,[2,35]),o($V31,[2,36]),o($V31,[2,37]),o($V31,[2,38]),o($V31,[2,39]),o($VW,[2,24]),{34:[1,271],38:[1,270]},{34:[1,273],38:[1,272]},{34:$VX,42:274,43:$VY,44:$VZ,45:$V_,46:$V$},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,275],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,113],{78:276,79:$Vc1}),{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,278],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,129]),{17:76,19:75,20:70,24:$Vq,29:279,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{25:[1,280],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{25:[1,281],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{36:[1,282]},{36:[1,283]},{25:[1,284],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{36:[1,285]},{36:[1,286]},{38:[1,287],82:288,83:$V91,84:$Va1},o($Vd1,[2,123]),{17:76,19:75,20:70,24:$Vq,29:289,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{47:[1,290]},{17:76,19:75,20:70,24:$Vq,29:291,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{2:$V0,6:292,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,20]),o($V11,[2,28]),{17:76,19:75,20:70,24:$Vq,29:293,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{17:76,19:75,20:70,24:$Vq,29:294,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},o($VW,[2,25]),{47:[1,295]},o($VW,[2,26]),{47:[1,296]},o($Vb1,[2,52]),o($Vg,[2,111],{78:297,79:$Vc1}),o($Vg,[2,114]),{36:[1,298],77:[1,299]},o($Vg,[2,128]),{25:[1,300],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($Vg,[2,131]),{36:[1,301]},{2:$V0,6:302,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,6:303,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{36:[1,304]},{2:$V0,6:305,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,6:306,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,121]),o($Vd1,[2,122]),{47:[1,307],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{36:[1,308]},o($Vb1,[2,53],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,309],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{41:[1,310],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($VE,[2,44],{51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),{34:$VX,42:311,43:$VY,44:$VZ,45:$V_,46:$V$},{34:$VX,42:312,43:$VY,44:$VZ,45:$V_,46:$V$},o($Vg,[2,112]),{2:$V0,6:313,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,314],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{24:[1,315]},o($Vg,[2,130]),{2:$V0,6:316,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,317],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,318],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,319],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,6:320,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,321],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,322],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,323],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{36:[1,324]},{2:$V0,6:325,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,326],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,110]),o($VT,[2,99]),o($Vb1,[2,50]),o($Vb1,[2,51]),{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,327],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,118]),{17:76,19:75,20:70,24:$Vq,29:328,34:$Vr,36:$Vs,40:$Vt,51:$Vu,57:$Vv,58:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,329],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,134]),o($Vg,[2,137]),o($Vg,[2,139]),{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,330],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,135]),o($Vg,[2,136]),o($Vg,[2,138]),{2:$V0,6:331,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,332],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,333],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vd1,[2,127]),o($Vg,[2,115]),{25:[1,334],51:$VF,52:$VG,53:$VH,54:$VI,55:$VJ,56:$VK,61:$VL,62:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($Vg,[2,132]),o($Vg,[2,133]),{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,335],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vd1,[2,126]),o($Vd1,[2,125]),{36:[1,336]},o($Vd1,[2,124]),{2:$V0,6:337,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,338],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},{2:$V0,7:36,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:15,20:16,21:17,22:18,23:$V1,26:$V2,30:$V3,32:$V4,33:$V5,34:$V6,38:[1,339],73:$V7,74:$V8,75:$V9,76:$Va,77:$Vb,80:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,119],{78:340,79:$Vc1}),o($Vg,[2,116],{78:341,79:$Vc1}),o($Vg,[2,120]),o($Vg,[2,117])],
defaultActions: {35:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./Instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./Instrucciones.js').Tipo_Valor;
    const AST_Tools     	= require('./Instrucciones.js').AST_Tools;
    const Manejo_Errores    = require('./Instrucciones.js').Manejo_Errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar Espacios */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 43;
break;
case 4:return 44;
break;
case 5:return 45;
break;
case 6:return 46;
break;
case 7:return 33;
break;
case 8:return 64
break;
case 9:return 65
break;
case 10:return 66
break;
case 11:return 30;
break;
case 12:return 32;
break;
case 13:return 60;
break;
case 14:return 59;
break;
case 15:return 'OPDIV';
break;
case 16:return 55;
break;
case 17:return 56;
break;
case 18:return 54;
break;
case 19:return 51;
break;
case 20:return 52;
break;
case 21:return 40;
break;
case 22:return 41;
break;
case 23:return 24;
break;
case 24:return 25;
break;
case 25:return 36;
break;
case 26:return 38;
break;
case 27:return 69;
break;
case 28:return 70;
break;
case 29:return 68;
break;
case 30:return 67;
break;
case 31:return 71;
break;
case 32:return 35;
break;
case 33:return 72;
break;
case 34:return 27;
break;
case 35:return 18;
break;
case 36:return 39;
break;
case 37:return 47;
break;
case 38:return 'TERNARIO';
break;
case 39:return 61;
break;
case 40:return 62;
break;
case 41:return 63;
break;
case 42:return 77;
break;
case 43:return 79;
break;
case 44:return 80;
break;
case 45:return 83;
break;
case 46:return 84;
break;
case 47:return 85;
break;
case 48:return 86;
break;
case 49:return 87;
break;
case 50:return 89;
break;
case 51:return 90;
break;
case 52:return 73;
break;
case 53:return 74;
break;
case 54:return 75;
break;
case 55:return 76;
break;
case 56:return 26;
break;
case 57:return 28;
break;
case 58:return 23;
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 61:return 57
break;
case 62:return 34;
break;
case 63:return 5;
break;
case 64:Manejo_Errores.addErrorLexico(yy_.yytext,yy_.yylineno+1);return''
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\"|[^\"])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}