/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,20],$V2=[1,37],$V3=[1,21],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,23],$V8=[1,46],$V9=[1,45],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,44],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,27],$Vm=[1,32],$Vn=[1,29],$Vo=[1,30],$Vp=[1,31],$Vq=[2,5,19,24,25,27,31,33,34,35,37,39,41,48,52,58,59,64,65,66,67,74,75,76,77,80,84,89,90,91],$Vr=[52,53,54,55,56,57,62,63,68,69,70,71,72,73,83],$Vs=[2,91],$Vt=[1,51],$Vu=[1,50],$Vv=[2,90],$Vw=[1,53],$Vx=[2,77],$Vy=[2,73],$Vz=[1,61],$VA=[1,60],$VB=[1,62],$VC=[1,63],$VD=[1,65],$VE=[1,70],$VF=[1,71],$VG=[1,72],$VH=[1,73],$VI=[1,74],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[1,78],$VN=[1,79],$VO=[1,80],$VP=[1,81],$VQ=[1,82],$VR=[1,83],$VS=[1,92],$VT=[19,26,39,40,42,48,52,53,54,55,56,57,62,63,68,69,70,71,72,73,83,93,94],$VU=[1,121],$VV=[1,122],$VW=[19,40,93,94],$VX=[40,42],$VY=[19,26,28,36,39,40,42,48,52,53,54,55,56,57,62,63,68,69,70,71,72,73,83,93,94],$VZ=[1,169],$V_=[26,40],$V$=[1,180],$V01=[1,176],$V11=[1,177],$V21=[1,178],$V31=[1,179],$V41=[19,26,39,40,42,48,52,53,62,63,68,69,70,71,72,73,83,93,94],$V51=[19,26,39,40,42,48,52,53,54,55,57,62,63,68,69,70,71,72,73,83,93,94],$V61=[19,26,39,40,42,48,62,63,68,69,70,71,72,73,83,93,94],$V71=[19,26,39,40,42,48,62,63,72,73,83,93,94],$V81=[2,5,19,24,25,27,31,33,34,35,37,39,41,48,52,58,59,64,65,66,67,74,75,76,77,80,84,89,90,91,93,94],$V91=[2,97],$Va1=[1,213],$Vb1=[1,211],$Vc1=[19,26,36,37,39,40,93,94],$Vd1=[93,94],$Ve1=[19,39,40],$Vf1=[1,281],$Vg1=[1,282],$Vh1=[1,308],$Vi1=[39,87,88],$Vj1=[2,133],$Vk1=[1,327],$Vl1=[2,98],$Vm1=[1,331],$Vn1=[1,330];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"instrucciones":6,"instruccion":7,"asignacion":8,"declaracionAsignacion":9,"bloqueIf":10,"bloqueTernario":11,"bloqueWhile":12,"bloqueDoWhile":13,"bloqueFor":14,"bloqueForOf":15,"bloqueForIn":16,"bloqueSwitch":17,"atributos":18,"PUNTOYCOMA":19,"llamadaFuncion":20,"incremento_decremento":21,"sentenciasTransferencia":22,"declaracionFuncion":23,"GRAFICAR":24,"PARIZQ":25,"PARDER":26,"CONSOLE":27,"PUNTO":28,"LOG":29,"expresion":30,"LET":31,"listaID":32,"CONST":33,"TYPE":34,"ID":35,"IGUAL":36,"LLAVIZQ":37,"listaAttrib":38,"LLAVDER":39,"COMA":40,"CORIZQ":41,"CORDER":42,"tipo":43,"STRING":44,"NUMBER":45,"BOOLEAN":46,"VOID":47,"DOSPUNTOS":48,"listaArr":49,"listaVal":50,"listaParam":51,"OPMENOS":52,"OPMAS":53,"OPDIVISION":54,"OPMOD":55,"OPCIRCU":56,"OPMULTI":57,"NUMERO":58,"CADENA":59,"DECREMENTO":60,"INCREMENTO":61,"AND":62,"OR":63,"NOT":64,"TRUE":65,"FALSE":66,"NULL":67,"MAYOR":68,"MENOR":69,"MAYORIG":70,"MENORIG":71,"DIGUAL":72,"NIGUAL":73,"BREAK":74,"CONTINUE":75,"RETURN":76,"FUNCTION":77,"listaIDFun":78,"listaIDFunPrima":79,"IF":80,"bloqueElse":81,"ELSE":82,"TERNARIO":83,"SWITCH":84,"casos":85,"caso":86,"CASE":87,"DEFAULT":88,"WHILE":89,"DO":90,"FOR":91,"declaracionAsignacionCiclos":92,"OF":93,"IN":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"PUNTOYCOMA",24:"GRAFICAR",25:"PARIZQ",26:"PARDER",27:"CONSOLE",28:"PUNTO",29:"LOG",31:"LET",33:"CONST",34:"TYPE",35:"ID",36:"IGUAL",37:"LLAVIZQ",39:"LLAVDER",40:"COMA",41:"CORIZQ",42:"CORDER",44:"STRING",45:"NUMBER",46:"BOOLEAN",47:"VOID",48:"DOSPUNTOS",52:"OPMENOS",53:"OPMAS",54:"OPDIVISION",55:"OPMOD",56:"OPCIRCU",57:"OPMULTI",58:"NUMERO",59:"CADENA",60:"DECREMENTO",61:"INCREMENTO",62:"AND",63:"OR",64:"NOT",65:"TRUE",66:"FALSE",67:"NULL",68:"MAYOR",69:"MENOR",70:"MAYORIG",71:"MENORIG",72:"DIGUAL",73:"NIGUAL",74:"BREAK",75:"CONTINUE",76:"RETURN",77:"FUNCTION",80:"IF",82:"ELSE",83:"TERNARIO",84:"SWITCH",87:"CASE",88:"DEFAULT",89:"WHILE",90:"DO",91:"FOR",93:"OF",94:"IN"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,4],[7,7],[7,2],[9,3],[9,3],[9,6],[9,7],[9,7],[8,4],[8,7],[8,10],[8,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,5],[43,5],[43,5],[43,5],[43,5],[32,5],[32,3],[32,3],[32,1],[32,7],[32,5],[32,5],[32,3],[49,3],[49,1],[38,5],[38,5],[38,3],[50,5],[50,3],[51,3],[51,1],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[30,1],[30,2],[30,2],[30,1],[30,3],[30,3],[30,2],[30,1],[30,1],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,1],[30,3],[30,2],[30,3],[30,4],[30,4],[30,4],[30,7],[21,2],[21,2],[18,3],[18,6],[18,9],[18,3],[18,3],[18,6],[18,9],[18,3],[18,6],[18,9],[18,12],[18,6],[18,3],[18,6],[18,9],[18,3],[18,9],[18,12],[18,15],[18,9],[20,4],[20,3],[22,2],[22,2],[22,2],[22,3],[23,10],[23,9],[23,9],[23,8],[78,4],[79,5],[79,0],[10,7],[10,8],[10,6],[10,7],[81,4],[81,8],[81,9],[81,3],[81,7],[81,8],[11,6],[11,4],[17,7],[85,2],[85,1],[86,6],[86,5],[86,5],[86,4],[12,7],[12,6],[13,8],[13,7],[14,10],[14,10],[14,9],[14,9],[15,9],[15,9],[16,9],[16,9],[92,2],[92,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
Manejo_Errores.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]);this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 18: case 19: case 36:
this.$=$$[$0]
break;
case 15: case 16: case 17:
this.$=$$[$0-1]
break;
case 20:
this.$=AST_Tools.nuevoGraficar();
break;
case 21:
this.$=AST_Tools.nuevaSalida($$[$0-2])
break;
case 22:
Manejo_Errores.addErrorSintactico(yytext,this._$.first_line,this._$.first_column);this.$=undefined; 
break;
case 23:
this.$=AST_Tools.declaracion_let($$[$0-1])
break;
case 24:
this.$=AST_Tools.declaracion_const($$[$0-1])
break;
case 25:
this.$=AST_Tools.declaracion_type($$[$0-4],$$[$0-1])
break;
case 26: case 27:
this.$=AST_Tools.declaracion_type($$[$0-5],$$[$0-2])
break;
case 28: case 31:
this.$=AST_Tools.asignacion($$[$0-3],$$[$0-1])
break;
case 29:
this.$=AST_Tools.asignacionArr($$[$0-6],$$[$0-4],undefined,$$[$0-1])
break;
case 30:
this.$=AST_Tools.asignacionArr($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1])
break;
case 32:
this.$=Tipo_Valor.STRING
break;
case 33:
this.$=Tipo_Valor.NUMBER
break;
case 34:
this.$=Tipo_Valor.BOOLEAN
break;
case 35:
this.$=Tipo_Valor.VOID
break;
case 37:
this.$=Tipo_Valor.STRING_ARR
break;
case 38:
this.$=Tipo_Valor.NUMBER_ARR
break;
case 39:
this.$=Tipo_Valor.BOOLEAN_ARR
break;
case 40:
this.$=Tipo_Valor.VOID_ARR
break;
case 41:
this.$=($$[$0-2]+"_ARR")
break;
case 42:
this.$=Tipo_Valor.STRING_ARR_ARR
break;
case 43:
this.$=Tipo_Valor.NUMBER_ARR_ARR
break;
case 44:
this.$=Tipo_Valor.BOOLEAN_ARR_ARR
break;
case 45:
this.$=Tipo_Valor.VOID_ARR_ARR
break;
case 46:
this.$=($$[$0-4]+"_ARR_ARR")
break;
case 47:
$$[$0-4].push(AST_Tools.newID($$[$0-2],$$[$0],undefined));
break;
case 48:
$$[$0-2].push(AST_Tools.newID($$[$0],undefined,undefined));
break;
case 49:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0],undefined)
break;
case 50:
this.$=AST_Tools.newIDList($$[$0],undefined,undefined)
break;
case 51:
$$[$0-6].push(AST_Tools.newID($$[$0-4],$$[$0-2],$$[$0]));
break;
case 52:
$$[$0-4].push(AST_Tools.newID($$[$0-2],undefined,$$[$0]));
break;
case 53:
this.$=AST_Tools.newIDList($$[$0-4],$$[$0-2],$$[$0])
break;
case 54:
this.$=AST_Tools.newIDList($$[$0-2],undefined,$$[$0])
break;
case 55:
$$[$0-2].push(AST_Tools.newArrVal($$[$0]))
break;
case 56:
this.$=AST_Tools.newArrValList($$[$0])
break;
case 57: case 58:
$$[$0-4].push(AST_Tools.newAttrib($$[$0-2],$$[$0]))
break;
case 59:
this.$=AST_Tools.newAttribList($$[$0-2],$$[$0])
break;
case 60:
$$[$0-4].push(AST_Tools.newTypeVal($$[$0-2],$$[$0]))
break;
case 61:
this.$=AST_Tools.newTypeValList($$[$0-2],$$[$0])
break;
case 62:
$$[$0-2].push(AST_Tools.newParam($$[$0]))
break;
case 63:
this.$=AST_Tools.newParamList($$[$0])
break;
case 64:
 this.$ = $$[$0-1]; 
break;
case 65:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NEGACION); 
break;
case 66:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 67:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 68:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 69:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 70:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 71:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 72:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMBER); 
break;
case 73:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 74:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.STRING); 
break;
case 75:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.DECREMENTO); 
break;
case 76:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.INCREMENTO); 
break;
case 77: case 90: case 91:
 this.$ = $$[$0]
break;
case 78:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 79:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 80:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NOT);
break;
case 81:
 this.$ = AST_Tools.crearValor(true,Tipo_Valor.BOOLEAN);
break;
case 82:
 this.$ = AST_Tools.crearValor(false,Tipo_Valor.BOOLEAN);
break;
case 83:
 this.$ = AST_Tools.crearValor(null,Tipo_Valor.NULL);
break;
case 84:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 85:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 86:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 87:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 88:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 89:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 92: case 94:
 this.$ = $$[$0-1]
break;
case 93:
 this.$ = []
break;
case 95: case 96:
 this.$ = $$[$0-2]
break;
case 97:
 this.$ = AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR)
break;
case 98:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR)
break;
case 99:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.DECREMENTO); 
break;
case 100:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.INCREMENTO); 
break;
case 101: case 104: case 105: case 108: case 113: case 116:
 this.$ = AST_Tools.operacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 102: case 106: case 114:
 this.$ = AST_Tools.operacionBinaria($$[$0-5],AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 103: case 107: case 115:
 this.$ = AST_Tools.operacionBinaria($$[$0-8],AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 109: case 112:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-5],$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 110:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-5],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 111:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-11],$$[$0-8],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 117: case 120:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-6],Tipo_Operacion.ACCESO_ARR),$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 118:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-11],$$[$0-9],Tipo_Operacion.ACCESO_ARR),$$[$0-6],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 119:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-14],$$[$0-12],Tipo_Operacion.ACCESO_ARR),$$[$0-9],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 121:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 122:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 123:
this.$=AST_Tools.nuevoBreak();
break;
case 124:
this.$=AST_Tools.nuevoContinue();
break;
case 125:
this.$=AST_Tools.nuevoReturn(undefined);
break;
case 126:
this.$=AST_Tools.nuevoReturn($$[$0-1]);
break;
case 127:
this.$=AST_Tools.nuevaFuncion($$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1])
break;
case 128:
this.$=AST_Tools.nuevaFuncion($$[$0-3],$$[$0-7],undefined,$$[$0-1])
break;
case 129:
this.$=AST_Tools.nuevaFuncion($$[$0-2],$$[$0-7],$$[$0-5],undefined)
break;
case 130:
this.$=AST_Tools.nuevaFuncion($$[$0-2],$$[$0-6],undefined,undefined)
break;
case 131:
this.$=$$[$0];
break;
case 132:
$$[$0].push(AST_Tools.newID($$[$0-7],$$[$0-5]));this.$=$$[$0]
break;
case 133:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0]);
break;
case 134:
this.$= AST_Tools.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 135:
this.$= AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])
break;
case 136:
this.$= AST_Tools.nuevoIf($$[$0-3],undefined);
break;
case 137:
this.$= AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])
break;
case 138:
this.$= $$[$0-1]
break;
case 139:
this.$= [AST_Tools.nuevoIf($$[$0-4],$$[$0-1])]
break;
case 140:
this.$= [AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])]
break;
case 141:
this.$= undefined
break;
case 142:
this.$= [AST_Tools.nuevoIf($$[$0-3],undefined)]
break;
case 143:
this.$= [AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])]
break;
case 144:
this.$=AST_Tools.nuevoTernario($$[$0-5],$$[$0-3],$$[$0-1])
break;
case 145:
this.$=AST_Tools.nuevoTernario($$[$0-3],$$[$0-2],undefined)
break;
case 146:
this.$=AST_Tools.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 147:
$$[$0-1].push($$[$0]);
break;
case 148:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 149:
this.$=AST_Tools.nuevoCaso($$[$0-4],$$[$0-1]);
break;
case 150:
this.$=AST_Tools.nuevoCasoDefault($$[$0-1]);
break;
case 151:
this.$=AST_Tools.nuevoCaso($$[$0-3],undefined);
break;
case 152:
this.$=AST_Tools.nuevoCasoDefault(undefined);
break;
case 153:
this.$= AST_Tools.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 154:
this.$= AST_Tools.nuevoWhile($$[$0-3],undefined);
break;
case 155:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 156:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],undefined);
break;
case 157: case 158:
this.$=AST_Tools.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 159: case 160:
this.$=AST_Tools.nuevoFor($$[$0-6],$$[$0-5],$$[$0-3],undefined);
break;
case 161: case 162:
this.$=AST_Tools.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 163: case 164:
this.$=AST_Tools.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 165:
this.$=AST_Tools.declaracion_let($$[$0])
break;
case 166:
this.$=AST_Tools.asignacion($$[$0-2],$$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{1:[3]},{5:[1,47]},{2:$V0,5:[2,2],7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vr,$Vs,{19:[1,49],28:$Vt,36:$Vu}),o($Vr,$Vv,{19:[1,52],28:$Vw}),o($Vr,$Vx,{19:[1,54]}),o($Vq,[2,18]),o($Vq,[2,19]),{25:[1,55]},{28:[1,56]},{19:[1,57]},o($Vr,$Vy,{25:$Vz,28:$VA,36:[1,58],41:[1,59],60:$VB,61:$VC}),{32:64,35:$VD},{32:66,35:$VD},{35:[1,67]},{25:[1,68]},{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,83:[1,69]},{25:[1,84]},{37:[1,85]},{25:[1,86]},{25:[1,87]},{19:[1,88]},{19:[1,89]},{18:95,19:[1,90],20:94,21:93,25:$V2,30:91,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{35:[1,96]},{18:95,20:94,21:93,25:$V2,30:97,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:98,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,72],{60:[1,99],61:[1,100]}),o($VT,[2,74]),{18:95,20:94,21:93,25:$V2,30:101,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,81]),o($VT,[2,82]),o($VT,[2,83]),{18:95,20:94,21:93,25:$V2,30:104,35:$VS,37:$V8,41:$V9,42:[1,103],49:102,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{35:[1,106],50:105},{1:[2,1]},o($Vq,[2,3]),o($Vq,[2,15]),{18:95,20:94,21:93,25:$V2,30:107,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:109,35:[1,108]},o($Vq,[2,16]),{20:111,35:[1,110]},o($Vq,[2,17]),{26:[1,112]},{29:[1,113]},o($Vq,[2,22]),{18:95,20:94,21:93,25:$V2,30:114,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:115,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:117,35:[1,116]},{18:95,20:94,21:93,25:$V2,26:[1,119],30:120,35:$VS,37:$V8,41:$V9,51:118,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,99]),o($VT,[2,100]),{19:$VU,40:$VV},o($VW,[2,50],{36:[1,124],48:[1,123]}),{19:[1,125],40:$VV},{36:[1,126]},{18:95,20:94,21:93,25:$V2,30:127,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:128,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{18:95,20:94,21:93,25:$V2,30:129,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:130,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:131,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:132,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:133,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:134,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:135,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:136,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:137,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:138,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:139,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:140,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:141,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:142,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:143,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:144,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,145],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{8:146,9:147,18:150,20:152,31:[1,151],33:$V5,34:$V6,35:[1,149],92:148},{18:95,20:94,21:93,25:$V2,30:153,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,123]),o($Vq,[2,124]),o($Vq,[2,125]),{19:[1,154],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VT,$Vy,{25:$Vz,28:$VA,41:[1,155],60:$VB,61:$VC}),o($VT,$Vx),o($VT,$Vv,{28:$Vw}),o($VT,$Vs,{28:$Vt}),{25:[1,156]},{26:[1,157],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VT,[2,65]),o($VT,[2,75]),o($VT,[2,76]),o($VT,[2,80]),{40:[1,159],42:[1,158]},o($VT,[2,93]),o($VX,[2,56],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{19:[1,162],39:[1,160],40:[1,161]},{48:[1,163]},{19:[1,164],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VY,[2,101],{25:$Vz,41:[1,165]}),o($VY,[2,104]),o($VY,[2,113],{25:$Vz,41:[1,166]}),o($VY,[2,116]),{19:[1,167]},{25:[1,168]},{19:$VZ,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,170],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VY,[2,105],{25:$Vz,41:[1,171]}),o($VY,[2,108]),{26:[1,172],40:[1,173]},o($VY,[2,122]),o($V_,[2,63],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($Vq,[2,23]),{35:[1,174]},{35:$V$,43:175,44:$V01,45:$V11,46:$V21,47:$V31},{18:95,20:94,21:93,25:$V2,30:181,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,24]),{37:[1,182]},{26:[1,183],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,185],20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,48:[1,184],52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($V41,[2,66],{54:$VG,55:$VH,56:$VI,57:$VJ}),o($V41,[2,67],{54:$VG,55:$VH,56:$VI,57:$VJ}),o($V51,[2,68],{56:$VI}),o($V51,[2,69],{56:$VI}),o($VT,[2,70]),o($V51,[2,71],{56:$VI}),o([19,26,39,40,42,48,62,63,83,93,94],[2,78],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o([19,26,39,40,42,48,63,83,93,94],[2,79],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($V61,[2,84],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($V61,[2,85],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($V61,[2,86],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($V61,[2,87],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($V71,[2,88],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,68:$VM,69:$VN,70:$VO,71:$VP}),o($V71,[2,89],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,68:$VM,69:$VN,70:$VO,71:$VP}),{26:[1,186],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,187],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{89:[1,188]},{18:95,20:94,21:93,25:$V2,30:189,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,93:[1,190],94:[1,191]},{18:95,20:94,21:93,25:$V2,30:192,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{93:[1,193],94:[1,194]},{25:$Vz,28:$VA,36:[1,195],41:[1,196]},{28:$Vt,36:$Vu},{32:197,35:$VD},{28:$Vw},{26:[1,198],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($Vq,[2,126]),{18:95,20:94,21:93,25:$V2,30:199,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{26:[1,201],35:[1,202],78:200},o($VT,[2,64]),o($VT,[2,92]),{18:95,20:94,21:93,25:$V2,30:203,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,94]),{35:[1,205],39:[1,204]},{39:[1,206]},{18:95,20:94,21:93,25:$V2,30:207,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V81,[2,31]),{18:95,20:94,21:93,25:$V2,30:208,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:209,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,20]),{18:95,20:94,21:93,25:$V2,30:210,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V81,[2,28]),o($Vr,$V91,{28:$Va1,36:$Vb1,41:[1,212]}),{18:95,20:94,21:93,25:$V2,30:214,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VY,[2,121]),{18:95,20:94,21:93,25:$V2,30:215,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VW,[2,48],{36:[1,217],48:[1,216]}),o($VW,[2,49],{36:[1,218]}),o($Vc1,[2,32],{41:[1,219]}),o($Vc1,[2,33],{41:[1,220]}),o($Vc1,[2,34],{41:[1,221]}),o($Vc1,[2,35],{41:[1,222]}),o($Vc1,[2,36],{41:[1,223]}),o($VW,[2,54],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{35:[1,225],38:224},{37:[1,226]},{2:$V0,6:227,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,145]),{37:[1,228]},{89:[1,229]},{25:[1,230]},{19:[1,231],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{18:95,20:94,21:93,25:$V2,30:232,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:233,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:[1,234],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{18:95,20:94,21:93,25:$V2,30:235,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:236,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:237,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:238,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vd1,[2,165],{19:$VU,40:$VV}),{37:[1,239]},{42:[1,240],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{26:[1,241]},{48:[1,242]},{48:[1,243]},o($VX,[2,55],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($VT,[2,95]),{48:[1,244]},o($VT,[2,96]),o($Ve1,[2,61],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{42:[1,245],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,246],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{26:[1,247],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{18:95,20:94,21:93,25:$V2,30:248,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:249,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:251,35:[1,250]},{42:[1,252],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($V_,[2,62],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{35:$V$,43:253,44:$V01,45:$V11,46:$V21,47:$V31},{18:95,20:94,21:93,25:$V2,30:254,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:255,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{42:[1,256]},{42:[1,257]},{42:[1,258]},{42:[1,259]},{42:[1,260]},{19:[1,263],39:[1,261],40:[1,262]},{48:[1,264]},{2:$V0,6:265,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,266],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:[1,267],20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,6:268,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,269],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{25:[1,270]},{18:95,20:94,21:93,25:$V2,30:271,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:272,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{26:[1,273],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{26:[1,274],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{18:95,20:94,21:93,25:$V2,30:275,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{26:[1,276],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{26:[1,277],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($Vd1,[2,166],{19:$VZ,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{42:[1,278],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{85:279,86:280,87:$Vf1,88:$Vg1},o($VT,$V91,{28:$Va1,41:[1,283]}),{48:[1,284]},{35:$V$,43:285,44:$V01,45:$V11,46:$V21,47:$V31},{35:$V$,43:286,44:$V01,45:$V11,46:$V21,47:$V31},{18:95,20:94,21:93,25:$V2,30:287,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VY,[2,102],{41:[1,288]}),o($VY,[2,114],{41:[1,289]}),{19:[1,290]},{19:[1,291],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,292],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VY,[2,109],{25:$Vz,41:[1,293]}),o($VY,[2,112]),o($VY,[2,106],{41:[1,294]}),o($VW,[2,47],{36:[1,295]}),o($VW,[2,52],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($VW,[2,53],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($Vc1,[2,37],{41:[1,296]}),o($Vc1,[2,38],{41:[1,297]}),o($Vc1,[2,39],{41:[1,298]}),o($Vc1,[2,40],{41:[1,299]}),o($Vc1,[2,41],{41:[1,300]}),o($Vq,[2,25]),{35:[1,302],39:[1,301]},{35:[1,304],39:[1,303]},{35:$V$,43:305,44:$V01,45:$V11,46:$V21,47:$V31},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,306],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,136],{81:307,82:$Vh1}),o($Vq,[2,144]),{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,309],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,154]),{18:95,20:94,21:93,25:$V2,30:310,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{26:[1,311],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{26:[1,312],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,313]},{37:[1,314]},{26:[1,315],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,316]},{37:[1,317]},{28:$Va1,36:$Vb1,41:[1,318]},{39:[1,319],86:320,87:$Vf1,88:$Vg1},o($Vi1,[2,148]),{18:95,20:94,21:93,25:$V2,30:321,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{48:[1,322]},{18:95,20:94,21:93,25:$V2,30:323,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{35:$V$,43:324,44:$V01,45:$V11,46:$V21,47:$V31},{37:[1,325]},{26:$Vj1,40:$Vk1,79:326},o($Ve1,[2,60],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),{18:95,20:94,21:93,25:$V2,30:328,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:329,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,21]),o($V81,[2,29]),o($Vr,$Vl1,{28:$Vm1,36:$Vn1}),{18:95,20:94,21:93,25:$V2,30:332,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:333,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:334,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{42:[1,335]},{42:[1,336]},{42:[1,337]},{42:[1,338]},{42:[1,339]},o($Vq,[2,26]),{48:[1,340]},o($Vq,[2,27]),{48:[1,341]},o($Ve1,[2,59]),o($Vq,[2,134],{81:342,82:$Vh1}),o($Vq,[2,137]),{37:[1,343],80:[1,344]},o($Vq,[2,153]),{26:[1,345],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($Vq,[2,156]),{37:[1,346]},{2:$V0,6:347,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,6:348,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{37:[1,349]},{2:$V0,6:350,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,6:351,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{18:95,20:94,21:93,25:$V2,30:352,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,146]),o($Vi1,[2,147]),{48:[1,353],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,354]},{42:[1,355],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,356]},{2:$V0,6:357,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,358],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{26:[2,131]},{35:[1,359]},{42:[1,360],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,361],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{18:95,20:94,21:93,25:$V2,30:362,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:364,35:[1,363]},{42:[1,365],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,366],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VW,[2,51],{52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR}),o($Vc1,[2,42]),o($Vc1,[2,43]),o($Vc1,[2,44]),o($Vc1,[2,45]),o($Vc1,[2,46]),{35:$V$,43:367,44:$V01,45:$V11,46:$V21,47:$V31},{35:$V$,43:368,44:$V01,45:$V11,46:$V21,47:$V31},o($Vq,[2,135]),{2:$V0,6:369,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,370],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{25:[1,371]},o($Vq,[2,155]),{2:$V0,6:372,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,373],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,374],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,375],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,6:376,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,377],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,378],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,379],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{42:[1,380],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,381]},{2:$V0,6:382,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,383],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VT,$Vl1,{28:$Vm1}),{2:$V0,6:384,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,385],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,386],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,130]),{48:[1,387]},o($VY,[2,103]),o($VY,[2,115]),{19:[1,388],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($VY,[2,117],{25:$Vz,41:[1,389]}),o($VY,[2,120]),o($VY,[2,110],{41:[1,390]}),o($VY,[2,107]),o($Ve1,[2,57]),o($Ve1,[2,58]),{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,391],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,141]),{18:95,20:94,21:93,25:$V2,30:392,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,393],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,159]),o($Vq,[2,162]),o($Vq,[2,164]),{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,394],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,160]),o($Vq,[2,161]),o($Vq,[2,163]),{28:$Vm1,36:$Vn1},{2:$V0,6:395,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,396],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,397],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vi1,[2,152]),{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,398],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,129]),o($Vq,[2,128]),{35:$V$,43:399,44:$V01,45:$V11,46:$V21,47:$V31},o($V81,[2,30]),{18:95,20:94,21:93,25:$V2,30:400,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{18:95,20:94,21:93,25:$V2,30:401,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,138]),{26:[1,402],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($Vq,[2,157]),o($Vq,[2,158]),{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,403],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vi1,[2,151]),o($Vi1,[2,150]),o($Vq,[2,127]),{26:$Vj1,40:$Vk1,79:404},{42:[1,405],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{42:[1,406],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},{37:[1,407]},o($Vi1,[2,149]),{26:[2,132]},o($VY,[2,118],{41:[1,408]}),o($VY,[2,111]),{2:$V0,6:409,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,410],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},{18:95,20:94,21:93,25:$V2,30:411,35:$VS,37:$V8,41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,7:48,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,27:$V3,30:28,31:$V4,33:$V5,34:$V6,35:$V7,37:$V8,39:[1,412],41:$V9,52:$Va,58:$Vb,59:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,80:$Vl,84:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vq,[2,142],{81:413,82:$Vh1}),{42:[1,414],52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,62:$VK,63:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR},o($Vq,[2,139],{81:415,82:$Vh1}),o($Vq,[2,143]),o($VY,[2,119]),o($Vq,[2,140])],
defaultActions: {47:[2,1],326:[2,131],404:[2,132]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./Instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./Instrucciones.js').Tipo_Valor;
    const AST_Tools     	= require('./Instrucciones.js').AST_Tools;
    const Manejo_Errores    = require('./Instrucciones.js').Manejo_Errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar Espacios */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 44;
break;
case 4:return 45;
break;
case 5:return 46;
break;
case 6:return 47;
break;
case 7:return 34;
break;
case 8:return 65
break;
case 9:return 66
break;
case 10:return 67
break;
case 11:return 31;
break;
case 12:return 33;
break;
case 13:return 61;
break;
case 14:return 60;
break;
case 15:return 'OPDIV';
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 55;
break;
case 19:return 52;
break;
case 20:return 53;
break;
case 21:return 41;
break;
case 22:return 42;
break;
case 23:return 25;
break;
case 24:return 26;
break;
case 25:return 37;
break;
case 26:return 39;
break;
case 27:return 70;
break;
case 28:return 71;
break;
case 29:return 69;
break;
case 30:return 68;
break;
case 31:return 72;
break;
case 32:return 36;
break;
case 33:return 73;
break;
case 34:return 28;
break;
case 35:return 19;
break;
case 36:return 40;
break;
case 37:return 48;
break;
case 38:return 83;
break;
case 39:return 62;
break;
case 40:return 63;
break;
case 41:return 64;
break;
case 42:return 80;
break;
case 43:return 82;
break;
case 44:return 84;
break;
case 45:return 87;
break;
case 46:return 88;
break;
case 47:return 89;
break;
case 48:return 90;
break;
case 49:return 91;
break;
case 50:return 93;
break;
case 51:return 94;
break;
case 52:return 74;
break;
case 53:return 75;
break;
case 54:return 76;
break;
case 55:return 77;
break;
case 56:return 27;
break;
case 57:return 29;
break;
case 58:return 24;
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 62:return 58
break;
case 63:return 35;
break;
case 64:return 5;
break;
case 65:Manejo_Errores.addErrorLexico(yy_.yytext,yy_.yylineno+1);return''
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\"|[^\"])*')/,/^(?:`(\\"|[^\"])*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}