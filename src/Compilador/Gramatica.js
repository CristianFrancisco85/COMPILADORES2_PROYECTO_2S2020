/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,15],$V5=[1,20],$V6=[1,24],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[2,5,18,20,21,22,26,66,69,74,75,76],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,37],$Vi=[1,39],$Vj=[1,52],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[16,26,30,37,38,42,43,44,45,46,47,48,53,54,59,60,61,62,63,64],$Vt=[1,70],$Vu=[16,37],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[37,42],$VK=[16,23,26,30,37,38,42,43,44,45,46,47,48,53,54,59,60,61,62,63,64,65],$VL=[2,5,18,20,21,22,26,41,43,49,50,55,56,57,58,66,69,74,75,76],$VM=[1,118],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,145],$VS=[30,37],$VT=[1,149],$VU=[16,23,26,37],$VV=[1,163],$VW=[16,26,30,37,38,42,43,44,53,54,59,60,61,62,63,64],$VX=[16,26,30,37,38,42,43,44,45,46,48,53,54,59,60,61,62,63,64],$VY=[16,26,30,37,38,42,53,54,59,60,61,62,63,64],$VZ=[16,26,30,37,38,42,53,54,63,64],$V_=[1,194],$V$=[1,209],$V01=[1,210],$V11=[1,224],$V21=[26,72,73],$V31=[26,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"instrucciones":6,"instruccion":7,"asignacion":8,"declaracion_asignacion":9,"bloqueIf":10,"bloqueWhile":11,"bloqueDoWhile":12,"bloqueFor":13,"bloqueSwitch":14,"llamadaFuncion":15,"PUNTOYCOMA":16,"incremento_decremento":17,"LET":18,"listaID":19,"CONST":20,"TYPE":21,"ID":22,"IGUAL":23,"LLAVIZQ":24,"listaAttrib":25,"LLAVDER":26,"expresion":27,"CORIZQ":28,"listaArr":29,"CORDER":30,"atributos":31,"tipo":32,"STRING":33,"NUMBER":34,"BOOLEAN":35,"VOID":36,"COMA":37,"DOSPUNTOS":38,"listaVal":39,"listaParam":40,"PARIZQ":41,"PARDER":42,"OPMENOS":43,"OPMAS":44,"OPDIVISION":45,"OPMOD":46,"OPCIRCU":47,"OPMULTI":48,"NUMERO":49,"CADENA":50,"DECREMENTO":51,"INCREMENTO":52,"AND":53,"OR":54,"NOT":55,"TRUE":56,"FALSE":57,"NULL":58,"MAYOR":59,"MENOR":60,"MAYORIG":61,"MENORIG":62,"DIGUAL":63,"NIGUAL":64,"PUNTO":65,"IF":66,"bloqueElse":67,"ELSE":68,"SWITCH":69,"casos":70,"caso":71,"CASE":72,"DEFAULT":73,"WHILE":74,"DO":75,"FOR":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"PUNTOYCOMA",18:"LET",20:"CONST",21:"TYPE",22:"ID",23:"IGUAL",24:"LLAVIZQ",26:"LLAVDER",28:"CORIZQ",30:"CORDER",33:"STRING",34:"NUMBER",35:"BOOLEAN",36:"VOID",37:"COMA",38:"DOSPUNTOS",41:"PARIZQ",42:"PARDER",43:"OPMENOS",44:"OPMAS",45:"OPDIVISION",46:"OPMOD",47:"OPCIRCU",48:"OPMULTI",49:"NUMERO",50:"CADENA",51:"DECREMENTO",52:"INCREMENTO",53:"AND",54:"OR",55:"NOT",56:"TRUE",57:"FALSE",58:"NULL",59:"MAYOR",60:"MENOR",61:"MAYORIG",62:"MENORIG",63:"DIGUAL",64:"NIGUAL",65:"PUNTO",66:"IF",68:"ELSE",69:"SWITCH",72:"CASE",73:"DEFAULT",74:"WHILE",75:"DO",76:"FOR"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[9,3],[9,3],[9,6],[8,4],[8,6],[8,7],[8,4],[8,6],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[19,5],[19,3],[19,3],[19,1],[19,7],[19,5],[19,5],[19,3],[19,9],[19,7],[19,7],[19,5],[19,9],[19,7],[19,7],[19,5],[29,3],[29,1],[25,5],[25,3],[39,5],[39,3],[40,3],[40,1],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,1],[27,1],[27,2],[27,2],[27,1],[27,3],[27,3],[27,2],[27,1],[27,1],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,1],[27,4],[17,2],[17,2],[31,3],[31,3],[31,6],[31,6],[31,9],[15,4],[15,3],[10,7],[10,8],[10,6],[10,7],[67,4],[67,8],[67,9],[67,3],[67,7],[67,8],[14,7],[70,2],[70,1],[71,6],[71,5],[71,5],[71,4],[11,7],[11,6],[12,8],[12,7],[13,10],[13,10],[13,9],[13,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
Manejo_Errores.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 27:
this.$=$$[$0]
break;
case 12: case 13:
this.$=$$[$0-1]
break;
case 14:
Manejo_Errores.addErrorSintactico(yytext,this._$.first_line,this._$.first_column);this.$=undefined 
break;
case 15:
this.$=AST_Tools.declaracion_let($$[$0-1])
break;
case 16:
this.$=AST_Tools.declaracion_const($$[$0-1])
break;
case 17:
this.$=AST_Tools.declaracion_type($$[$0-4],$$[$0-1])
break;
case 18: case 21:
this.$=AST_Tools.asignacion($$[$0-3],$$[$0-1])
break;
case 19: case 22:
this.$=AST_Tools.asignacion($$[$0-5],$$[$0-2])
break;
case 20:
this.$=AST_Tools.asignacionArr($$[$0-6],$$[$0-4],$$[$0-1])
break;
case 23:
this.$=Tipo_Valor.STRING
break;
case 24:
this.$=Tipo_Valor.NUMBER
break;
case 25:
this.$=Tipo_Valor.BOOLEAN
break;
case 26:
this.$=Tipo_Valor.VOID
break;
case 28:
this.$=Tipo_Valor.STRING_ARR
break;
case 29:
this.$=Tipo_Valor.NUMBER_ARR
break;
case 30:
this.$=Tipo_Valor.BOOLEAN_ARR
break;
case 31:
this.$=Tipo_Valor.VOID_ARR
break;
case 32:
this.$=($$[$0-2]+"_ARR")
break;
case 33:
$$[$0-4].push(AST_Tools.newID($$[$0-2],$$[$0],undefined));
break;
case 34:
$$[$0-2].push(AST_Tools.newID($$[$0],undefined,undefined));
break;
case 35:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0],undefined)
break;
case 36:
this.$=AST_Tools.newIDList($$[$0],undefined,undefined)
break;
case 37:
$$[$0-6].push(AST_Tools.newID($$[$0-4],$$[$0-2],$$[$0]));
break;
case 38:
$$[$0-4].push(AST_Tools.newID($$[$0-2],undefined,$$[$0]));
break;
case 39:
this.$=AST_Tools.newIDList($$[$0-4],$$[$0-2],$$[$0])
break;
case 40:
this.$=AST_Tools.newIDList($$[$0-2],undefined,$$[$0])
break;
case 41: case 45:
$$[$0-8].push(AST_Tools.newID($$[$0-6],$$[$0-4],$$[$0-1]));
break;
case 42: case 46:
$$[$0-6].push(AST_Tools.newID($$[$0-4],undefined,$$[$0-1]));
break;
case 43:
this.$=AST_Tools.newIDList($$[$0-6],$$[$0-4],$$[$0-1])
break;
case 44: case 48:
this.$=AST_Tools.newIDList($$[$0-4],undefined,$$[$0-1])
break;
case 47:
this.$=AST_Tools.newIDList($$[$0-6],$$[$0-4],$$[$0-2])
break;
case 49:
$$[$0-2].push(AST_Tools.newArrVal($$[$0]))
break;
case 50:
this.$=AST_Tools.newArrValList($$[$0])
break;
case 51:
$$[$0-4].push(AST_Tools.newAttrib($$[$0-2],$$[$0]))
break;
case 52:
this.$=AST_Tools.newAttribList($$[$0-2],$$[$0])
break;
case 53:
$$[$0-4].push(AST_Tools.newTypeVal($$[$0-2],$$[$0]))
break;
case 54:
this.$=AST_Tools.newTypeValList($$[$0-2],$$[$0])
break;
case 55:
$$[$0-2].push(AST_Tools.newParam($$[$0]))
break;
case 56:
this.$=AST_Tools.newParamList($$[$0])
break;
case 57:
 this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NEGACION); 
break;
case 59:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 60:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 61:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 62:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 63:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 64:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 65:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMBER); 
break;
case 66:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 67:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.STRING); 
break;
case 68:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.DECREMENTO); 
break;
case 69:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.INCREMENTO); 
break;
case 70: case 83: case 84:
 this.$ = $$[$0]
break;
case 71:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 72:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 73:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NOT);
break;
case 74: case 75:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.BOOLEAN);
break;
case 76:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.NULL);
break;
case 77:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 78:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 79:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 80:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 81:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 82:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 85:
 this.$ = AST_Tools.crearValor(AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Valor.TYPE)
break;
case 86:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.DECREMENTO); 
break;
case 87:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.INCREMENTO); 
break;
case 88: case 89:
 this.$ = AST_Tools.operacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 90:
 this.$ = AST_Tools.operacionBinaria($$[$0-5],AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 91:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-5],$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 92:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-5],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 93:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 94:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 95: case 100:
this.$= AST_Tools.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 96: case 101:
this.$= AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])
break;
case 97: case 103:
this.$= AST_Tools.nuevoIf($$[$0-3],undefined);
break;
case 98: case 104:
this.$= AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])
break;
case 99:
this.$= $$[$0-1]
break;
case 102:
this.$= undefined
break;
case 105:
this.$=AST_Tools.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 106:
$$[$0-1].push($$[$0]);
break;
case 107:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 108:
this.$=AST_Tools.nuevoCaso($$[$0-4],$$[$0-1]);
break;
case 109:
this.$=AST_Tools.nuevoCasoDefault($$[$0-1]);
break;
case 110:
this.$=AST_Tools.nuevoCaso($$[$0-3],undefined);
break;
case 111:
this.$=AST_Tools.nuevoCasoDefault(undefined);
break;
case 112:
this.$= AST_Tools.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 113:
this.$= AST_Tools.nuevoWhile($$[$0-3],undefined);
break;
case 114:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 115:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],undefined);
break;
case 116: case 117:
this.$=AST_Tools.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 118: case 119:
this.$=AST_Tools.nuevoFor($$[$0-6],$$[$0-5],$$[$0-3],undefined);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{1:[3]},{5:[1,25]},{2:$V0,5:[2,2],7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{16:[1,27]},{16:[1,28]},{16:[1,29]},{23:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,65:$Vg},{23:[1,36],65:$Vh},{19:38,22:$Vi},{19:40,22:$Vi},{22:[1,41]},{41:[1,42]},{41:[1,43]},{24:[1,44]},{41:[1,45]},{41:[1,46]},{1:[2,1]},o($Va,[2,3]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),{15:59,17:54,22:$Vj,27:47,28:[1,48],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:61,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:64,31:60,40:62,41:$Vk,42:[1,63],43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vs,[2,86]),o($Vs,[2,87]),{22:[1,65]},{15:59,17:54,22:$Vj,27:66,28:[1,67],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:[1,68]},{16:[1,69],37:$Vt},o($Vu,[2,36],{23:[1,72],38:[1,71]}),{16:[1,73],37:$Vt},{23:[1,74]},{15:59,17:54,22:$Vj,27:75,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:76,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{2:$V0,6:77,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,78],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{8:79,9:80,18:$V1,20:$V2,21:$V3,22:[1,81],31:16},{15:59,17:54,22:$Vj,27:82,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{16:[1,83],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{15:59,17:54,22:$Vj,27:99,29:98,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:100,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:101,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vs,[2,65],{51:[1,102],52:[1,103]}),o($Vs,[2,66],{28:[1,104],41:$Vd,51:$Ve,52:$Vf,65:$Vg}),o($Vs,[2,67]),o($Vs,[2,70]),{15:59,17:54,22:$Vj,27:105,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vs,[2,74]),o($Vs,[2,75]),o($Vs,[2,76]),o($Vs,[2,83]),o($Vs,[2,84],{65:$Vh}),{30:[1,106],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{37:[1,108],42:[1,107]},o($Vs,[2,94]),o($VJ,[2,56],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),o($VK,[2,89]),{16:[1,109],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{15:59,17:54,22:$Vj,27:99,29:110,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($VK,[2,88],{28:[1,111]}),o($VL,[2,15]),{22:[1,112]},{22:$VM,32:113,33:$VN,34:$VO,35:$VP,36:$VQ},{15:59,17:54,22:$Vj,24:[1,121],27:119,28:[1,120],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($VL,[2,16]),{24:[1,122]},{42:[1,123],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{42:[1,124],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,125],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{74:[1,126]},{15:59,17:54,22:$Vj,27:127,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:128,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{23:$Vb,28:$Vc,65:$Vg},{42:[1,129],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($VL,[2,18]),{15:59,17:54,22:$Vj,27:130,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:131,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:132,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:133,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:134,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:135,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:136,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:137,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:138,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:139,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:140,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:141,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:142,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:143,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{30:[1,144],37:$VR},o($VS,[2,50],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{42:[1,146],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($Vs,[2,58]),o($Vs,[2,68]),o($Vs,[2,69]),{15:59,17:54,22:$Vj,27:147,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vs,[2,73]),{23:[1,148],65:$VT},o($Vs,[2,93]),{15:59,17:54,22:$Vj,27:150,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($VL,[2,21]),{30:[1,151],37:$VR},{15:59,17:54,22:$Vj,27:152,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vu,[2,34],{23:[1,154],38:[1,153]}),o($Vu,[2,35],{23:[1,155]}),o($VU,[2,23],{28:[1,156]}),o($VU,[2,24],{28:[1,157]}),o($VU,[2,25],{28:[1,158]}),o($VU,[2,26],{28:[1,159]}),o($VU,[2,27],{28:[1,160]}),o($Vu,[2,40],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{15:59,17:54,22:$Vj,27:99,29:161,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:$VV,39:162},{22:[1,165],25:164},{24:[1,166]},{24:[1,167]},{74:[1,168]},{41:[1,169]},{16:[1,170],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{16:[1,171],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{24:[1,172]},o($VW,[2,59],{45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VW,[2,60],{45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VX,[2,61],{47:$Vz}),o($VX,[2,62],{47:$Vz}),o($Vs,[2,63]),o($VX,[2,64],{47:$Vz}),o([16,26,30,37,38,42,53,54],[2,71],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),o([16,26,30,37,38,42,54],[2,72],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),o($VY,[2,77],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VY,[2,78],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VY,[2,79],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VY,[2,80],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VZ,[2,81],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,59:$VD,60:$VE,61:$VF,62:$VG}),o($VZ,[2,82],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,59:$VD,60:$VE,61:$VF,62:$VG}),{16:[1,173]},{15:59,17:54,22:$Vj,27:174,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($Vs,[2,57]),{30:[1,175],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{15:59,17:54,22:$Vj,27:176,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:[1,177]},o($VJ,[2,55],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{16:[1,178]},{30:[1,179],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{22:$VM,32:180,33:$VN,34:$VO,35:$VP,36:$VQ},{15:59,17:54,22:$Vj,24:[1,183],27:181,28:[1,182],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,24:[1,186],27:184,28:[1,185],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{30:[1,187]},{30:[1,188]},{30:[1,189]},{30:[1,190]},{30:[1,191]},{30:[1,192],37:$VR},{26:[1,193],37:$V_},{38:[1,195]},{26:[1,196],37:[1,197]},{38:[1,198]},{2:$V0,6:199,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,200],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,6:201,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,202],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{41:[1,203]},{15:59,17:54,22:$Vj,27:204,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:205,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,27:206,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{70:207,71:208,72:$V$,73:$V01},o($VL,[2,19]),o($VS,[2,49],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),o($Vs,[2,85],{65:$VT}),{16:[1,211],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($VK,[2,91],{28:[1,212]}),o($VL,[2,22]),o($VK,[2,90]),o($Vu,[2,33],{23:[1,213]}),o($Vu,[2,38],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{15:59,17:54,22:$Vj,27:99,29:214,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:$VV,39:215},o($Vu,[2,39],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{15:59,17:54,22:$Vj,27:99,29:216,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:$VV,39:217},o($VU,[2,28]),o($VU,[2,29]),o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32]),o($Vu,[2,44]),o($Vu,[2,48]),{22:[1,218]},{15:59,17:54,22:$Vj,27:219,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},o($VL,[2,17]),{22:[1,220]},{22:$VM,32:221,33:$VN,34:$VO,35:$VP,36:$VQ},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,222],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,97],{67:223,68:$V11}),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,225],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,113]),{15:59,17:54,22:$Vj,27:226,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{42:[1,227],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{42:[1,228],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{42:[1,229],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{26:[1,230],71:231,72:$V$,73:$V01},o($V21,[2,107]),{15:59,17:54,22:$Vj,27:232,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{38:[1,233]},o($VL,[2,20]),{15:59,17:54,22:$Vj,27:234,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{15:59,17:54,22:$Vj,24:[1,237],27:235,28:[1,236],31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{30:[1,238],37:$VR},{26:[1,239],37:$V_},{30:[1,240],37:$VR},{26:[1,241],37:$V_},{38:[1,242]},o($V31,[2,54],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{38:[1,243]},o($V31,[2,52]),o($Va,[2,95],{67:244,68:$V11}),o($Va,[2,98]),{24:[1,245],66:[1,246]},o($Va,[2,112]),{42:[1,247],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($Va,[2,115]),{24:[1,248]},{24:[1,249]},o($Va,[2,105]),o($V21,[2,106]),{38:[1,250],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},{24:[1,251]},{30:[1,252],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($Vu,[2,37],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),{15:59,17:54,22:$Vj,27:99,29:253,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:$VV,39:254},o($Vu,[2,42]),o($Vu,[2,46]),o($Vu,[2,43]),o($Vu,[2,47]),{15:59,17:54,22:$Vj,27:255,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{22:$VM,32:256,33:$VN,34:$VO,35:$VP,36:$VQ},o($Va,[2,96]),{2:$V0,6:257,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,258],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{41:[1,259]},o($Va,[2,114]),{2:$V0,6:260,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,261],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,6:262,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,263],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{24:[1,264]},{2:$V0,6:265,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,266],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($VK,[2,92]),{30:[1,267],37:$VR},{26:[1,268],37:$V_},o($V31,[2,53],{43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI}),o($V31,[2,51]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,269],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,102]),{15:59,17:54,22:$Vj,27:270,31:60,41:$Vk,43:$Vl,49:$Vm,50:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,271],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,118]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,272],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,119]),{2:$V0,6:273,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,274],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,275],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($V21,[2,111]),o($Vu,[2,41]),o($Vu,[2,45]),o($Va,[2,99]),{42:[1,276],43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,53:$VB,54:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI},o($Va,[2,116]),o($Va,[2,117]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,277],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($V21,[2,110]),o($V21,[2,109]),{24:[1,278]},o($V21,[2,108]),{2:$V0,6:279,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,280],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:$V1,20:$V2,21:$V3,22:$V4,26:[1,281],31:16,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,103],{67:282,68:$V11}),o($Va,[2,100],{67:283,68:$V11}),o($Va,[2,104]),o($Va,[2,101])],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./Instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./Instrucciones.js').Tipo_Valor;
    const AST_Tools     	= require('./Instrucciones.js').AST_Tools;
    const Manejo_Errores    = require('./Instrucciones.js').Manejo_Errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar Espacios */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 33;
break;
case 4:return 34;
break;
case 5:return 35;
break;
case 6:return 36;
break;
case 7:return 21;
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 58
break;
case 11:return 18;
break;
case 12:return 20;
break;
case 13:return 52;
break;
case 14:return 51;
break;
case 15:return 'OPDIV';
break;
case 16:return 48;
break;
case 17:return 46;
break;
case 18:return 43;
break;
case 19:return 44;
break;
case 20:return 47;
break;
case 21:return 28;
break;
case 22:return 30;
break;
case 23:return 41;
break;
case 24:return 42;
break;
case 25:return 24;
break;
case 26:return 26;
break;
case 27:return 61;
break;
case 28:return 62;
break;
case 29:return 60;
break;
case 30:return 59;
break;
case 31:return 63;
break;
case 32:return 23;
break;
case 33:return 64;
break;
case 34:return 65;
break;
case 35:return 16;
break;
case 36:return 37;
break;
case 37:return 38;
break;
case 38:return 'TERNARIO';
break;
case 39:return 53;
break;
case 40:return 54;
break;
case 41:return 55;
break;
case 42:return 66;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 72;
break;
case 46:return 73;
break;
case 47:return 74;
break;
case 48:return 75;
break;
case 49:return 76;
break;
case 50:return 'OF';
break;
case 51:return 'IN';
break;
case 52:return 'BREAK';
break;
case 53:return 'CONTINUE';
break;
case 54:return 'RETURN';
break;
case 55:return 'FUNCTION';
break;
case 56:return 'CONSOLE';
break;
case 57:return 'LOG';
break;
case 58:return 'GRAFICAR';
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50; 
break;
case 61:return 49
break;
case 62:return 22;
break;
case 63:return 5;
break;
case 64:Manejo_Errores.addErrorLexico(yy_.yytext,yy_.yylineno+1);return''
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\"|[^\"])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}