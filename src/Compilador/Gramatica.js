/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,16],$V5=[1,20],$V6=[1,24],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[2,5,19,21,22,23,27,66,69,74,75,76],$Vb=[1,28],$Vc=[1,29],$Vd=[1,31],$Ve=[1,34],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,36],$Vk=[1,41],$Vl=[1,53],$Vm=[1,63],$Vn=[1,62],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,54],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[16,27,28,31,37,42,43,44,45,46,47,48,53,54,59,60,61,62,63,64],$Vx=[1,76],$Vy=[16,28],$Vz=[1,92],$VA=[1,93],$VB=[1,94],$VC=[1,95],$VD=[1,96],$VE=[1,97],$VF=[1,98],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[16,24,27,28,31,37,42,43,44,45,46,47,48,53,54,59,60,61,62,63,64,65],$VO=[28,42],$VP=[2,5,19,21,22,23,25,27,30,41,43,49,50,55,56,57,58,66,69,74,75,76],$VQ=[1,129],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[28,31],$VW=[1,164],$VX=[16,24,27,28],$VY=[16,27,28,31,37,42,43,44,53,54,59,60,61,62,63,64],$VZ=[16,27,28,31,37,42,43,44,45,46,48,53,54,59,60,61,62,63,64],$V_=[16,27,28,31,37,42,53,54,59,60,61,62,63,64],$V$=[16,27,28,31,37,42,53,54,63,64],$V01=[1,218],$V11=[1,219],$V21=[16,27,28],$V31=[1,231],$V41=[27,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"instrucciones":6,"instruccion":7,"asignacion":8,"declaracion_asignacion":9,"bloqueIf":10,"bloqueWhile":11,"bloqueDoWhile":12,"bloqueFor":13,"bloqueSwitch":14,"atributos":15,"PUNTOYCOMA":16,"llamadaFuncion":17,"incremento_decremento":18,"LET":19,"listaID":20,"CONST":21,"TYPE":22,"ID":23,"IGUAL":24,"LLAVIZQ":25,"listaAttrib":26,"LLAVDER":27,"COMA":28,"expresion":29,"CORIZQ":30,"CORDER":31,"tipo":32,"STRING":33,"NUMBER":34,"BOOLEAN":35,"VOID":36,"DOSPUNTOS":37,"listaArr":38,"listaVal":39,"listaParam":40,"PARIZQ":41,"PARDER":42,"OPMENOS":43,"OPMAS":44,"OPDIVISION":45,"OPMOD":46,"OPCIRCU":47,"OPMULTI":48,"NUMERO":49,"CADENA":50,"DECREMENTO":51,"INCREMENTO":52,"AND":53,"OR":54,"NOT":55,"TRUE":56,"FALSE":57,"NULL":58,"MAYOR":59,"MENOR":60,"MAYORIG":61,"MENORIG":62,"DIGUAL":63,"NIGUAL":64,"PUNTO":65,"IF":66,"bloqueElse":67,"ELSE":68,"SWITCH":69,"casos":70,"caso":71,"CASE":72,"DEFAULT":73,"WHILE":74,"DO":75,"FOR":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"PUNTOYCOMA",19:"LET",21:"CONST",22:"TYPE",23:"ID",24:"IGUAL",25:"LLAVIZQ",27:"LLAVDER",28:"COMA",30:"CORIZQ",31:"CORDER",33:"STRING",34:"NUMBER",35:"BOOLEAN",36:"VOID",37:"DOSPUNTOS",41:"PARIZQ",42:"PARDER",43:"OPMENOS",44:"OPMAS",45:"OPDIVISION",46:"OPMOD",47:"OPCIRCU",48:"OPMULTI",49:"NUMERO",50:"CADENA",51:"DECREMENTO",52:"INCREMENTO",53:"AND",54:"OR",55:"NOT",56:"TRUE",57:"FALSE",58:"NULL",59:"MAYOR",60:"MENOR",61:"MAYORIG",62:"MENORIG",63:"DIGUAL",64:"NIGUAL",65:"PUNTO",66:"IF",68:"ELSE",69:"SWITCH",72:"CASE",73:"DEFAULT",74:"WHILE",75:"DO",76:"FOR"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[9,3],[9,3],[9,6],[9,7],[9,7],[8,4],[8,7],[8,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[20,5],[20,3],[20,3],[20,1],[20,7],[20,5],[20,5],[20,3],[38,3],[38,1],[26,5],[26,5],[26,3],[39,5],[39,3],[40,3],[40,1],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,1],[29,2],[29,2],[29,1],[29,3],[29,3],[29,2],[29,1],[29,1],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,3],[29,3],[29,4],[29,4],[29,4],[18,2],[18,2],[15,3],[15,6],[15,3],[15,3],[15,6],[15,3],[15,6],[15,9],[15,6],[15,3],[15,6],[15,3],[17,4],[17,3],[10,7],[10,8],[10,6],[10,7],[67,4],[67,8],[67,9],[67,3],[67,7],[67,8],[14,7],[70,2],[70,1],[71,6],[71,5],[71,5],[71,4],[11,7],[11,6],[12,8],[12,7],[13,10],[13,10],[13,9],[13,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
Manejo_Errores.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 28:
this.$=$$[$0]
break;
case 12: case 13: case 14:
this.$=$$[$0-1]
break;
case 15:
Manejo_Errores.addErrorSintactico(yytext,this._$.first_line,this._$.first_column);this.$=undefined 
break;
case 16:
this.$=AST_Tools.declaracion_let($$[$0-1])
break;
case 17:
this.$=AST_Tools.declaracion_const($$[$0-1])
break;
case 18:
this.$=AST_Tools.declaracion_type($$[$0-4],$$[$0-1])
break;
case 19: case 20:
this.$=AST_Tools.declaracion_type($$[$0-5],$$[$0-2])
break;
case 21: case 23:
this.$=AST_Tools.asignacion($$[$0-3],$$[$0-1])
break;
case 22:
this.$=AST_Tools.asignacionArr($$[$0-6],$$[$0-4],$$[$0-1])
break;
case 24:
this.$=Tipo_Valor.STRING
break;
case 25:
this.$=Tipo_Valor.NUMBER
break;
case 26:
this.$=Tipo_Valor.BOOLEAN
break;
case 27:
this.$=Tipo_Valor.VOID
break;
case 29:
this.$=Tipo_Valor.STRING_ARR
break;
case 30:
this.$=Tipo_Valor.NUMBER_ARR
break;
case 31:
this.$=Tipo_Valor.BOOLEAN_ARR
break;
case 32:
this.$=Tipo_Valor.VOID_ARR
break;
case 33:
this.$=($$[$0-2]+"_ARR")
break;
case 34:
$$[$0-4].push(AST_Tools.newID($$[$0-2],$$[$0],undefined));
break;
case 35:
$$[$0-2].push(AST_Tools.newID($$[$0],undefined,undefined));
break;
case 36:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0],undefined)
break;
case 37:
this.$=AST_Tools.newIDList($$[$0],undefined,undefined)
break;
case 38:
$$[$0-6].push(AST_Tools.newID($$[$0-4],$$[$0-2],$$[$0]));
break;
case 39:
$$[$0-4].push(AST_Tools.newID($$[$0-2],undefined,$$[$0]));
break;
case 40:
this.$=AST_Tools.newIDList($$[$0-4],$$[$0-2],$$[$0])
break;
case 41:
this.$=AST_Tools.newIDList($$[$0-2],undefined,$$[$0])
break;
case 42:
$$[$0-2].push(AST_Tools.newArrVal($$[$0]))
break;
case 43:
this.$=AST_Tools.newArrValList($$[$0])
break;
case 44: case 45:
$$[$0-4].push(AST_Tools.newAttrib($$[$0-2],$$[$0]))
break;
case 46:
this.$=AST_Tools.newAttribList($$[$0-2],$$[$0])
break;
case 47:
$$[$0-4].push(AST_Tools.newTypeVal($$[$0-2],$$[$0]))
break;
case 48:
this.$=AST_Tools.newTypeValList($$[$0-2],$$[$0])
break;
case 49:
$$[$0-2].push(AST_Tools.newParam($$[$0]))
break;
case 50:
this.$=AST_Tools.newParamList($$[$0])
break;
case 51:
 this.$ = $$[$0-1]; 
break;
case 52:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NEGACION); 
break;
case 53:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 54:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 55:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 56:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 57:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 58:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 59:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMBER); 
break;
case 60:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 61:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.STRING); 
break;
case 62:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.DECREMENTO); 
break;
case 63:
 this.$ = AST_Tools.operacionBinaria (Number($$[$0-1]),undefined,Tipo_Operacion.INCREMENTO); 
break;
case 64: case 77: case 78:
 this.$ = $$[$0]
break;
case 65:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 66:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 67:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NOT);
break;
case 68: case 69:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.BOOLEAN);
break;
case 70:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.NULL);
break;
case 71:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 72:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 73:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 74:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 75:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 76:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 79: case 80:
 this.$ = $$[$0-1]
break;
case 81: case 82:
 this.$ = $$[$0-2]
break;
case 83:
 this.$ = AST_Tools.crearValor(AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Valor.TYPE)
break;
case 84:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.DECREMENTO); 
break;
case 85:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.INCREMENTO); 
break;
case 86: case 88: case 89: case 91: case 95: case 97:
 this.$ = AST_Tools.operacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 87: case 90: case 96:
 this.$ = AST_Tools.operacionBinaria($$[$0-5],AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 92: case 94:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-5],$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 93:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-5],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 98:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 99:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 100: case 105:
this.$= AST_Tools.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 101: case 106:
this.$= AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])
break;
case 102: case 108:
this.$= AST_Tools.nuevoIf($$[$0-3],undefined);
break;
case 103: case 109:
this.$= AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])
break;
case 104:
this.$= $$[$0-1]
break;
case 107:
this.$= undefined
break;
case 110:
this.$=AST_Tools.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 111:
$$[$0-1].push($$[$0]);
break;
case 112:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 113:
this.$=AST_Tools.nuevoCaso($$[$0-4],$$[$0-1]);
break;
case 114:
this.$=AST_Tools.nuevoCasoDefault($$[$0-1]);
break;
case 115:
this.$=AST_Tools.nuevoCaso($$[$0-3],undefined);
break;
case 116:
this.$=AST_Tools.nuevoCasoDefault(undefined);
break;
case 117:
this.$= AST_Tools.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 118:
this.$= AST_Tools.nuevoWhile($$[$0-3],undefined);
break;
case 119:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 120:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],undefined);
break;
case 121: case 122:
this.$=AST_Tools.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 123: case 124:
this.$=AST_Tools.nuevoFor($$[$0-6],$$[$0-5],$$[$0-3],undefined);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{1:[3]},{5:[1,25]},{2:$V0,5:[2,2],7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{16:[1,27],24:$Vb,65:$Vc},{16:[1,30],65:$Vd},{16:[1,32]},{16:[1,33]},{24:$Ve,30:$Vf,41:$Vg,51:$Vh,52:$Vi,65:$Vj},{20:40,23:$Vk},{20:42,23:$Vk},{23:[1,43]},{41:[1,44]},{41:[1,45]},{25:[1,46]},{41:[1,47]},{41:[1,48]},{1:[2,1]},o($Va,[2,3]),o($Va,[2,12]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:49,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{17:65,23:[1,64]},o($Va,[2,13]),{17:67,23:[1,66]},o($Va,[2,14]),o($Va,[2,15]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:68,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:69,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{17:71,23:[1,70]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:74,30:$Vn,40:72,41:$Vo,42:[1,73],43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vw,[2,84]),o($Vw,[2,85]),{16:[1,75],28:$Vx},o($Vy,[2,37],{24:[1,78],37:[1,77]}),{16:[1,79],28:$Vx},{24:[1,80]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:81,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:82,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{2:$V0,6:83,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,84],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{8:85,9:86,15:88,17:89,19:$V1,21:$V2,22:$V3,23:[1,87]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:90,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{16:[1,91],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:106,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:107,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vw,[2,59],{51:[1,108],52:[1,109]}),o($Vw,[2,60],{30:[1,110],41:$Vg,51:$Vh,52:$Vi,65:$Vj}),o($Vw,[2,61]),o($Vw,[2,64]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:111,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vw,[2,68]),o($Vw,[2,69]),o($Vw,[2,70]),o($Vw,[2,77],{65:$Vd}),o($Vw,[2,78],{65:$Vc}),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:113,30:$Vn,38:112,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{23:[1,115],39:114},o($VN,[2,86],{30:[1,116],41:$Vg}),o($VN,[2,88]),o($VN,[2,95],{30:[1,117],41:$Vg}),o($VN,[2,97]),{16:[1,118],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{31:[1,119],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($VN,[2,89],{30:[1,120],41:$Vg}),o($VN,[2,91]),{28:[1,122],42:[1,121]},o($VN,[2,99]),o($VO,[2,50],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($VP,[2,16]),{23:[1,123]},{23:$VQ,32:124,33:$VR,34:$VS,35:$VT,36:$VU},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:130,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VP,[2,17]),{25:[1,131]},{42:[1,132],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{42:[1,133],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,134],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{74:[1,135]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:136,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:137,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{24:$Ve,30:$Vf,41:$Vg,65:$Vj},{24:$Vb,65:$Vc},{65:$Vd},{42:[1,138],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($VP,[2,23]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:139,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:140,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:141,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:142,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:143,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:144,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:145,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:146,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:147,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:148,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:149,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:150,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:151,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:152,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{42:[1,153],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($Vw,[2,52]),o($Vw,[2,62]),o($Vw,[2,63]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:154,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vw,[2,67]),{28:[1,156],31:[1,155]},o($VV,[2,43],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),{16:[1,159],27:[1,157],28:[1,158]},{37:[1,160]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:161,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:162,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VP,[2,21]),{24:[1,163],65:$VW},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:165,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VN,[2,98]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:166,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vy,[2,35],{24:[1,168],37:[1,167]}),o($Vy,[2,36],{24:[1,169]}),o($VX,[2,24],{30:[1,170]}),o($VX,[2,25],{30:[1,171]}),o($VX,[2,26],{30:[1,172]}),o($VX,[2,27],{30:[1,173]}),o($VX,[2,28],{30:[1,174]}),o($Vy,[2,41],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),{23:[1,176],26:175},{25:[1,177]},{25:[1,178]},{74:[1,179]},{41:[1,180]},{16:[1,181],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{16:[1,182],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{25:[1,183]},o($VY,[2,53],{45:$VB,46:$VC,47:$VD,48:$VE}),o($VY,[2,54],{45:$VB,46:$VC,47:$VD,48:$VE}),o($VZ,[2,55],{47:$VD}),o($VZ,[2,56],{47:$VD}),o($Vw,[2,57]),o($VZ,[2,58],{47:$VD}),o([16,27,28,31,37,42,53,54],[2,65],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o([16,27,28,31,37,42,54],[2,66],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($V_,[2,71],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($V_,[2,72],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($V_,[2,73],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($V_,[2,74],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($V$,[2,75],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,59:$VH,60:$VI,61:$VJ,62:$VK}),o($V$,[2,76],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,59:$VH,60:$VI,61:$VJ,62:$VK}),o($Vw,[2,51]),{31:[1,184],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($Vw,[2,79]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:185,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vw,[2,80]),{23:[1,187],27:[1,186]},{27:[1,188]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:189,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{31:[1,190],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{31:[1,191],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:192,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{17:194,23:[1,193]},{31:[1,195],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($VO,[2,49],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),{23:$VQ,32:196,33:$VR,34:$VS,35:$VT,36:$VU},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:197,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:198,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{31:[1,199]},{31:[1,200]},{31:[1,201]},{31:[1,202]},{31:[1,203]},{16:[1,206],27:[1,204],28:[1,205]},{37:[1,207]},{2:$V0,6:208,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,209],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,6:210,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,211],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{41:[1,212]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:213,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:214,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:215,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{70:216,71:217,72:$V01,73:$V11},o($Vw,[2,83],{65:$VW}),o($VV,[2,42],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($Vw,[2,81]),{37:[1,220]},o($Vw,[2,82]),o($V21,[2,48],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($VN,[2,87]),o($VN,[2,96]),{16:[1,221],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($VN,[2,92],{30:[1,222],41:$Vg}),o($VN,[2,94]),o($VN,[2,90]),o($Vy,[2,34],{24:[1,223]}),o($Vy,[2,39],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($Vy,[2,40],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),o($VX,[2,29]),o($VX,[2,30]),o($VX,[2,31]),o($VX,[2,32]),o($VX,[2,33]),o($VP,[2,18]),{23:[1,225],27:[1,224]},{23:[1,227],27:[1,226]},{23:$VQ,32:228,33:$VR,34:$VS,35:$VT,36:$VU},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,229],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,102],{67:230,68:$V31}),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,232],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,118]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:233,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{42:[1,234],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{42:[1,235],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{42:[1,236],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{27:[1,237],71:238,72:$V01,73:$V11},o($V41,[2,112]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:239,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{37:[1,240]},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:241,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VP,[2,22]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:242,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{15:61,17:60,18:55,23:$Vl,25:$Vm,29:243,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VP,[2,19]),{37:[1,244]},o($VP,[2,20]),{37:[1,245]},o($V21,[2,46]),o($Va,[2,100],{67:246,68:$V31}),o($Va,[2,103]),{25:[1,247],66:[1,248]},o($Va,[2,117]),{42:[1,249],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($Va,[2,120]),{25:[1,250]},{25:[1,251]},o($Va,[2,110]),o($V41,[2,111]),{37:[1,252],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},{25:[1,253]},o($V21,[2,47],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),{31:[1,254],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($Vy,[2,38],{43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM}),{23:$VQ,32:255,33:$VR,34:$VS,35:$VT,36:$VU},{23:$VQ,32:256,33:$VR,34:$VS,35:$VT,36:$VU},o($Va,[2,101]),{2:$V0,6:257,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,258],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{41:[1,259]},o($Va,[2,119]),{2:$V0,6:260,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,261],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,6:262,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,263],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{25:[1,264]},{2:$V0,6:265,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,266],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($VN,[2,93]),o($V21,[2,44]),o($V21,[2,45]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,267],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,107]),{15:61,17:60,18:55,23:$Vl,25:$Vm,29:268,30:$Vn,41:$Vo,43:$Vp,49:$Vq,50:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,269],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,123]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,270],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,124]),{2:$V0,6:271,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,272],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,273],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($V41,[2,116]),o($Va,[2,104]),{42:[1,274],43:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,53:$VF,54:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL,64:$VM},o($Va,[2,121]),o($Va,[2,122]),{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,275],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($V41,[2,115]),o($V41,[2,114]),{25:[1,276]},o($V41,[2,113]),{2:$V0,6:277,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,278],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},{2:$V0,7:26,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:$V1,21:$V2,22:$V3,23:$V4,27:[1,279],66:$V5,69:$V6,74:$V7,75:$V8,76:$V9},o($Va,[2,108],{67:280,68:$V31}),o($Va,[2,105],{67:281,68:$V31}),o($Va,[2,109]),o($Va,[2,106])],
defaultActions: {25:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./Instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./Instrucciones.js').Tipo_Valor;
    const AST_Tools     	= require('./Instrucciones.js').AST_Tools;
    const Manejo_Errores    = require('./Instrucciones.js').Manejo_Errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar Espacios */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 33;
break;
case 4:return 34;
break;
case 5:return 35;
break;
case 6:return 36;
break;
case 7:return 22;
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 58
break;
case 11:return 19;
break;
case 12:return 21;
break;
case 13:return 52;
break;
case 14:return 51;
break;
case 15:return 'OPDIV';
break;
case 16:return 48;
break;
case 17:return 46;
break;
case 18:return 43;
break;
case 19:return 44;
break;
case 20:return 47;
break;
case 21:return 30;
break;
case 22:return 31;
break;
case 23:return 41;
break;
case 24:return 42;
break;
case 25:return 25;
break;
case 26:return 27;
break;
case 27:return 61;
break;
case 28:return 62;
break;
case 29:return 60;
break;
case 30:return 59;
break;
case 31:return 63;
break;
case 32:return 24;
break;
case 33:return 64;
break;
case 34:return 65;
break;
case 35:return 16;
break;
case 36:return 28;
break;
case 37:return 37;
break;
case 38:return 'TERNARIO';
break;
case 39:return 53;
break;
case 40:return 54;
break;
case 41:return 55;
break;
case 42:return 66;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 72;
break;
case 46:return 73;
break;
case 47:return 74;
break;
case 48:return 75;
break;
case 49:return 76;
break;
case 50:return 'OF';
break;
case 51:return 'IN';
break;
case 52:return 'BREAK';
break;
case 53:return 'CONTINUE';
break;
case 54:return 'RETURN';
break;
case 55:return 'FUNCTION';
break;
case 56:return 'CONSOLE';
break;
case 57:return 'LOG';
break;
case 58:return 'GRAFICAR';
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50; 
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 50; 
break;
case 61:return 49
break;
case 62:return 23;
break;
case 63:return 5;
break;
case 64:Manejo_Errores.addErrorLexico(yy_.yytext,yy_.yylineno+1);return''
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\"|[^\"])*')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}