/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,21],$V2=[1,38],$V3=[1,22],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,24],$V8=[1,47],$V9=[1,46],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,28],$Vm=[1,33],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[2,5,20,25,26,28,32,34,35,36,38,40,42,50,54,60,61,64,65,66,67,76,77,78,79,82,86,89,90,91,92,93],$Vr=[54,55,56,57,58,59,62,63,68,69,70,71,72,73,74,75,85],$Vs=[2,94],$Vt=[1,53],$Vu=[1,51],$Vv=[2,93],$Vw=[1,55],$Vx=[2,80],$Vy=[2,78],$Vz=[1,64],$VA=[1,63],$VB=[1,66],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,71],$VR=[1,72],$VS=[1,95],$VT=[20,27,40,41,43,50,54,55,56,57,58,59,62,63,68,69,70,71,72,73,74,75,85,95,96],$VU=[1,124],$VV=[1,125],$VW=[20,41,95,96],$VX=[20,27,40,41,43,50,54,55,56,57,58,59,62,63,68,69,70,71,72,73,85,95,96],$VY=[41,43],$VZ=[20,27,29,37,40,41,43,44,50,54,55,56,57,58,59,62,63,68,69,70,71,72,73,74,75,85,95,96],$V_=[1,173],$V$=[27,41],$V01=[1,185],$V11=[1,181],$V21=[1,182],$V31=[1,183],$V41=[1,184],$V51=[20,27,40,41,43,50,54,55,62,63,68,69,70,71,72,73,85,95,96],$V61=[20,27,40,41,43,50,54,55,56,57,59,62,63,68,69,70,71,72,73,85,95,96],$V71=[20,27,40,41,43,50,62,63,68,69,70,71,72,73,85,95,96],$V81=[20,27,40,41,43,50,62,63,72,73,85,95,96],$V91=[2,5,20,25,26,28,32,34,35,36,38,40,42,50,54,60,61,64,65,66,67,76,77,78,79,82,86,89,90,91,92,93,95,96],$Va1=[2,100],$Vb1=[1,219],$Vc1=[1,216],$Vd1=[20,27,37,38,40,41,95,96],$Ve1=[95,96],$Vf1=[20,40,41],$Vg1=[1,288],$Vh1=[1,289],$Vi1=[1,317],$Vj1=[40,89,90],$Vk1=[2,136],$Vl1=[1,336],$Vm1=[2,101],$Vn1=[1,341],$Vo1=[1,339];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"inicio":4,"EOF":5,"instrucciones":6,"instruccion":7,"asignacion":8,"masAsig":9,"declaracionAsignacion":10,"bloqueIf":11,"bloqueTernario":12,"bloqueWhile":13,"bloqueDoWhile":14,"bloqueFor":15,"bloqueForOf":16,"bloqueForIn":17,"bloqueSwitch":18,"atributos":19,"PUNTOYCOMA":20,"llamadaFuncion":21,"incremento_decremento":22,"sentenciasTransferencia":23,"declaracionFuncion":24,"GRAFICAR":25,"PARIZQ":26,"PARDER":27,"CONSOLE":28,"PUNTO":29,"LOG":30,"expresion":31,"LET":32,"listaID":33,"CONST":34,"TYPE":35,"ID":36,"IGUAL":37,"LLAVIZQ":38,"listaAttrib":39,"LLAVDER":40,"COMA":41,"CORIZQ":42,"CORDER":43,"MAS_ASIG":44,"tipo":45,"STRING":46,"NUMBER":47,"BOOLEAN":48,"VOID":49,"DOSPUNTOS":50,"listaArr":51,"listaVal":52,"listaParam":53,"OPMENOS":54,"OPMAS":55,"OPDIVISION":56,"OPMOD":57,"OPCIRCU":58,"OPMULTI":59,"NUMERO":60,"CADENA":61,"AND":62,"OR":63,"NOT":64,"TRUE":65,"FALSE":66,"NULL":67,"MAYOR":68,"MENOR":69,"MAYORIG":70,"MENORIG":71,"DIGUAL":72,"NIGUAL":73,"DECREMENTO":74,"INCREMENTO":75,"BREAK":76,"CONTINUE":77,"RETURN":78,"FUNCTION":79,"listaIDFun":80,"listaIDFunPrima":81,"IF":82,"bloqueElse":83,"ELSE":84,"TERNARIO":85,"SWITCH":86,"casos":87,"caso":88,"CASE":89,"DEFAULT":90,"WHILE":91,"DO":92,"FOR":93,"declaracionAsignacionCiclos":94,"OF":95,"IN":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PUNTOYCOMA",25:"GRAFICAR",26:"PARIZQ",27:"PARDER",28:"CONSOLE",29:"PUNTO",30:"LOG",32:"LET",34:"CONST",35:"TYPE",36:"ID",37:"IGUAL",38:"LLAVIZQ",40:"LLAVDER",41:"COMA",42:"CORIZQ",43:"CORDER",44:"MAS_ASIG",46:"STRING",47:"NUMBER",48:"BOOLEAN",49:"VOID",50:"DOSPUNTOS",54:"OPMENOS",55:"OPMAS",56:"OPDIVISION",57:"OPMOD",58:"OPCIRCU",59:"OPMULTI",60:"NUMERO",61:"CADENA",62:"AND",63:"OR",64:"NOT",65:"TRUE",66:"FALSE",67:"NULL",68:"MAYOR",69:"MENOR",70:"MAYORIG",71:"MENORIG",72:"DIGUAL",73:"NIGUAL",74:"DECREMENTO",75:"INCREMENTO",76:"BREAK",77:"CONTINUE",78:"RETURN",79:"FUNCTION",82:"IF",84:"ELSE",85:"TERNARIO",86:"SWITCH",89:"CASE",90:"DEFAULT",91:"WHILE",92:"DO",93:"FOR",95:"OF",96:"IN"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,4],[7,7],[7,2],[10,3],[10,3],[10,7],[10,8],[10,8],[8,4],[8,7],[8,10],[8,4],[9,4],[9,7],[9,10],[9,4],[45,1],[45,1],[45,1],[45,1],[45,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,5],[45,5],[45,5],[45,5],[45,5],[33,5],[33,3],[33,3],[33,1],[33,7],[33,5],[33,5],[33,3],[51,3],[51,1],[39,5],[39,5],[39,3],[52,5],[52,3],[53,3],[53,1],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,3],[31,3],[31,2],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,3],[31,2],[31,3],[31,4],[31,4],[31,4],[31,7],[22,2],[22,2],[19,3],[19,6],[19,9],[19,3],[19,3],[19,6],[19,9],[19,3],[19,6],[19,9],[19,12],[19,6],[19,3],[19,6],[19,9],[19,3],[19,9],[19,12],[19,15],[19,9],[21,4],[21,3],[23,2],[23,2],[23,2],[23,3],[24,10],[24,9],[24,9],[24,8],[80,4],[81,5],[81,0],[11,7],[11,8],[11,6],[11,7],[83,4],[83,8],[83,9],[83,3],[83,7],[83,8],[12,6],[12,4],[18,7],[87,2],[87,1],[88,4],[88,3],[88,3],[88,2],[13,7],[13,6],[14,8],[14,7],[15,10],[15,10],[15,9],[15,9],[16,9],[16,9],[17,9],[17,9],[94,2],[94,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
Manejo_Errores.resetErrors();return $$[$0-1];
break;
case 2:
this.$=AST_Tools.BloquePrincipal($$[$0]);
break;
case 3:
 $$[$0-1].push($$[$0]);this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 19: case 20: case 41:
this.$=$$[$0]
break;
case 16: case 17: case 18:
this.$=$$[$0-1]
break;
case 21:
this.$=AST_Tools.nuevoGraficar();
break;
case 22:
this.$=AST_Tools.nuevaSalida($$[$0-2])
break;
case 23:
Manejo_Errores.addErrorSintactico(yytext,this._$.first_line,this._$.first_column);this.$=undefined; 
break;
case 24:
this.$=AST_Tools.declaracion_let($$[$0-1])
break;
case 25:
this.$=AST_Tools.declaracion_const($$[$0-1])
break;
case 26:
this.$=AST_Tools.declaracion_type($$[$0-5],$$[$0-2])
break;
case 27: case 28:
this.$=AST_Tools.declaracion_type($$[$0-6],$$[$0-3])
break;
case 29: case 32:
this.$=AST_Tools.asignacion($$[$0-3],$$[$0-1])
break;
case 30:
this.$=AST_Tools.asignacionArr($$[$0-6],$$[$0-4],undefined,$$[$0-1])
break;
case 31:
this.$=AST_Tools.asignacionArr($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1])
break;
case 33: case 36:
this.$=AST_Tools.masAsignacion($$[$0-3],$$[$0-1])
break;
case 34:
this.$=AST_Tools.masAsignacionArr($$[$0-6],$$[$0-4],undefined,$$[$0-1])
break;
case 35:
this.$=AST_Tools.masAsignacionArr($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1])
break;
case 37:
this.$=Tipo_Valor.STRING
break;
case 38:
this.$=Tipo_Valor.NUMBER
break;
case 39:
this.$=Tipo_Valor.BOOLEAN
break;
case 40:
this.$=Tipo_Valor.VOID
break;
case 42:
this.$=Tipo_Valor.STRING_ARR
break;
case 43:
this.$=Tipo_Valor.NUMBER_ARR
break;
case 44:
this.$=Tipo_Valor.BOOLEAN_ARR
break;
case 45:
this.$=Tipo_Valor.VOID_ARR
break;
case 46:
this.$=($$[$0-2]+"_ARR")
break;
case 47:
this.$=Tipo_Valor.STRING_ARR_ARR
break;
case 48:
this.$=Tipo_Valor.NUMBER_ARR_ARR
break;
case 49:
this.$=Tipo_Valor.BOOLEAN_ARR_ARR
break;
case 50:
this.$=Tipo_Valor.VOID_ARR_ARR
break;
case 51:
this.$=($$[$0-4]+"_ARR_ARR")
break;
case 52:
$$[$0-4].push(AST_Tools.newID($$[$0-2],$$[$0],undefined));
break;
case 53:
$$[$0-2].push(AST_Tools.newID($$[$0],undefined,undefined));
break;
case 54:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0],undefined)
break;
case 55:
this.$=AST_Tools.newIDList($$[$0],undefined,undefined)
break;
case 56:
$$[$0-6].push(AST_Tools.newID($$[$0-4],$$[$0-2],$$[$0]));
break;
case 57:
$$[$0-4].push(AST_Tools.newID($$[$0-2],undefined,$$[$0]));
break;
case 58:
this.$=AST_Tools.newIDList($$[$0-4],$$[$0-2],$$[$0])
break;
case 59:
this.$=AST_Tools.newIDList($$[$0-2],undefined,$$[$0])
break;
case 60:
$$[$0-2].push(AST_Tools.newArrVal($$[$0]))
break;
case 61:
this.$=AST_Tools.newArrValList($$[$0])
break;
case 62: case 63:
$$[$0-4].push(AST_Tools.newAttrib($$[$0-2],$$[$0]))
break;
case 64:
this.$=AST_Tools.newAttribList($$[$0-2],$$[$0])
break;
case 65:
$$[$0-4].push(AST_Tools.newTypeVal($$[$0-2],$$[$0]))
break;
case 66:
this.$=AST_Tools.newTypeValList($$[$0-2],$$[$0])
break;
case 67:
$$[$0-2].push(AST_Tools.newParam($$[$0]))
break;
case 68:
this.$=AST_Tools.newParamList($$[$0])
break;
case 69:
 this.$ = $$[$0-1]; 
break;
case 70:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NEGACION); 
break;
case 71:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.RESTA);
break;
case 72:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.SUMA);
break;
case 73:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DIVISON);
break;
case 74:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MODULO);
break;
case 75:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.POTENCIA);
break;
case 76:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MULTIPLICACION);
break;
case 77:
 this.$ = AST_Tools.crearValor(Number($$[$0]),Tipo_Valor.NUMBER); 
break;
case 78:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.ID); 
break;
case 79:
 this.$ = AST_Tools.crearValor($$[$0],Tipo_Valor.STRING); 
break;
case 80: case 93: case 94:
 this.$ = $$[$0]
break;
case 81:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.AND);
break;
case 82:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.OR);
break;
case 83:
 this.$ = AST_Tools.operacionBinaria ($$[$0],undefined,Tipo_Operacion.NOT);
break;
case 84:
 this.$ = AST_Tools.crearValor(true,Tipo_Valor.BOOLEAN);
break;
case 85:
 this.$ = AST_Tools.crearValor(false,Tipo_Valor.BOOLEAN);
break;
case 86:
 this.$ = AST_Tools.crearValor(null,Tipo_Valor.NULL);
break;
case 87:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_QUE);
break;
case 88:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_QUE);
break;
case 89:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MAYOR_IGUAL);
break;
case 90:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.MENOR_IGUAL);
break;
case 91:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.DOBLE_IGUAL);
break;
case 92:
 this.$ = AST_Tools.operacionBinaria($$[$0-2], $$[$0], Tipo_Operacion.NO_IGUAL);
break;
case 95: case 97:
 this.$ = $$[$0-1]
break;
case 96:
 this.$ = []
break;
case 98: case 99:
 this.$ = $$[$0-2]
break;
case 100:
 this.$ = AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR)
break;
case 101:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR)
break;
case 102:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.DECREMENTO); 
break;
case 103:
 this.$ = AST_Tools.operacionBinaria ($$[$0-1],undefined,Tipo_Operacion.INCREMENTO); 
break;
case 104: case 107: case 108: case 111: case 116: case 119:
 this.$ = AST_Tools.operacionBinaria($$[$0-2],$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 105: case 109: case 117:
 this.$ = AST_Tools.operacionBinaria($$[$0-5],AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 106: case 110: case 118:
 this.$ = AST_Tools.operacionBinaria($$[$0-8],AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 112: case 115:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-5],$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 113:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-6],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 114:
 this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-11],$$[$0-9],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 120: case 123:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-8],$$[$0-6],Tipo_Operacion.ACCESO_ARR),$$[$0-3],Tipo_Operacion.ACCESO_ARR),$$[$0],Tipo_Operacion.ATRIBUTO)
break;
case 121:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-11],$$[$0-9],Tipo_Operacion.ACCESO_ARR),$$[$0-6],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria($$[$0-3],$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 122:
this.$ = AST_Tools.operacionBinaria(AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-14],$$[$0-12],Tipo_Operacion.ACCESO_ARR),$$[$0-9],Tipo_Operacion.ACCESO_ARR),AST_Tools.operacionBinaria(AST_Tools.operacionBinaria($$[$0-6],$$[$0-4],Tipo_Operacion.ACCESO_ARR),$$[$0-1],Tipo_Operacion.ACCESO_ARR),Tipo_Operacion.ATRIBUTO)
break;
case 124:
 this.$ = AST_Tools.llamadaFuncion($$[$0-3],$$[$0-1]);
break;
case 125:
 this.$ = AST_Tools.llamadaFuncion($$[$0-2],undefined);
break;
case 126:
this.$=AST_Tools.nuevoBreak();
break;
case 127:
this.$=AST_Tools.nuevoContinue();
break;
case 128:
this.$=AST_Tools.nuevoReturn(undefined);
break;
case 129:
this.$=AST_Tools.nuevoReturn($$[$0-1]);
break;
case 130:
this.$=AST_Tools.nuevaFuncion($$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1])
break;
case 131:
this.$=AST_Tools.nuevaFuncion($$[$0-3],$$[$0-7],undefined,$$[$0-1])
break;
case 132:
this.$=AST_Tools.nuevaFuncion($$[$0-2],$$[$0-7],$$[$0-5],undefined)
break;
case 133:
this.$=AST_Tools.nuevaFuncion($$[$0-2],$$[$0-6],undefined,undefined)
break;
case 134:
this.$=$$[$0];
break;
case 135:
$$[$0].push(AST_Tools.newID($$[$0-7],$$[$0-5]));this.$=$$[$0]
break;
case 136:
this.$=AST_Tools.newIDList($$[$0-2],$$[$0]);
break;
case 137:
this.$= AST_Tools.nuevoIf($$[$0-4],$$[$0-1]);
break;
case 138:
this.$= AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])
break;
case 139:
this.$= AST_Tools.nuevoIf($$[$0-3],undefined);
break;
case 140:
this.$= AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])
break;
case 141:
this.$= $$[$0-1]
break;
case 142:
this.$= [AST_Tools.nuevoIf($$[$0-4],$$[$0-1])]
break;
case 143:
this.$= [AST_Tools.nuevoIfElse($$[$0-5],$$[$0-2],$$[$0])]
break;
case 144:
this.$= undefined
break;
case 145:
this.$= [AST_Tools.nuevoIf($$[$0-3],undefined)]
break;
case 146:
this.$= [AST_Tools.nuevoIfElse($$[$0-4],undefined,$$[$0])]
break;
case 147:
this.$=AST_Tools.nuevoTernario($$[$0-5],$$[$0-3],$$[$0-1])
break;
case 148:
this.$=AST_Tools.nuevoTernario($$[$0-3],$$[$0-2],undefined)
break;
case 149:
this.$=AST_Tools.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 150:
$$[$0-1].push($$[$0]);
break;
case 151:
this.$=AST_Tools.listaCasos($$[$0]);
break;
case 152:
this.$=AST_Tools.nuevoCaso($$[$0-2],$$[$0]);
break;
case 153:
this.$=AST_Tools.nuevoCasoDefault($$[$0]);
break;
case 154:
this.$=AST_Tools.nuevoCaso($$[$0-1],undefined);
break;
case 155:
this.$=AST_Tools.nuevoCasoDefault(undefined);
break;
case 156:
this.$= AST_Tools.nuevoWhile($$[$0-4],$$[$0-1]);
break;
case 157:
this.$= AST_Tools.nuevoWhile($$[$0-3],undefined);
break;
case 158:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],$$[$0-5]);
break;
case 159:
this.$= AST_Tools.nuevoDoWhile($$[$0-1],undefined);
break;
case 160: case 161:
this.$=AST_Tools.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 162: case 163:
this.$=AST_Tools.nuevoFor($$[$0-6],$$[$0-5],$$[$0-3],undefined);
break;
case 164: case 165:
this.$=AST_Tools.nuevoForOf($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 166: case 167:
this.$=AST_Tools.nuevoForIn($$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 168:
this.$=AST_Tools.declaracion_let($$[$0])
break;
case 169:
this.$=AST_Tools.asignacion($$[$0-2],$$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{1:[3]},{5:[1,48]},{2:$V0,5:[2,2],7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vr,$Vs,{20:[1,50],29:$Vt,37:$Vu,44:[1,52]}),o($Vr,$Vv,{20:[1,54],29:$Vw}),o($Vr,$Vx,{20:[1,56]}),o($Vq,[2,19]),o($Vq,[2,20]),{26:[1,57]},{29:[1,58]},{20:[1,59]},o($Vr,$Vy,{26:$Vz,29:$VA,37:[1,60],42:[1,61],44:[1,62]}),{33:65,36:$VB},{33:67,36:$VB},{36:[1,68]},{26:[1,69]},{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,85:[1,70]},{26:[1,87]},{38:[1,88]},{26:[1,89]},{26:[1,90]},{20:[1,91]},{20:[1,92]},{19:98,20:[1,93],21:97,22:96,26:$V2,31:94,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{36:[1,99]},{19:98,21:97,22:96,26:$V2,31:100,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:101,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,77]),o($VT,[2,79]),{19:98,21:97,22:96,26:$V2,31:102,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,86]),{19:98,21:97,22:96,26:$V2,31:105,36:$VS,38:$V8,42:$V9,43:[1,104],51:103,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{36:[1,107],52:106},{1:[2,1]},o($Vq,[2,3]),o($Vq,[2,16]),{19:98,21:97,22:96,26:$V2,31:108,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:109,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{21:111,36:[1,110]},o($Vq,[2,17]),{21:113,36:[1,112]},o($Vq,[2,18]),{27:[1,114]},{30:[1,115]},o($Vq,[2,23]),{19:98,21:97,22:96,26:$V2,31:116,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:117,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:118,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{21:120,36:[1,119]},{19:98,21:97,22:96,26:$V2,27:[1,122],31:123,36:$VS,38:$V8,42:$V9,53:121,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:$VU,41:$VV},o($VW,[2,55],{37:[1,127],50:[1,126]}),{20:[1,128],41:$VV},{37:[1,129]},{19:98,21:97,22:96,26:$V2,31:130,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:131,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($VT,[2,102]),o($VT,[2,103]),{19:98,21:97,22:96,26:$V2,31:132,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:133,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:134,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:135,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:136,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:137,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:138,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:139,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:140,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:141,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:142,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:143,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:144,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:145,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:146,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,6:147,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,148],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{8:149,10:150,19:153,21:155,32:[1,154],34:$V5,35:$V6,36:[1,152],94:151},{19:98,21:97,22:96,26:$V2,31:156,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,126]),o($Vq,[2,127]),o($Vq,[2,128]),{20:[1,157],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VT,$Vy,{26:$Vz,29:$VA,42:[1,158]}),o($VT,$Vx),o($VT,$Vv,{29:$Vw}),o($VT,$Vs,{29:$Vt}),{26:[1,159]},{27:[1,160],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VX,[2,70],{74:$VQ,75:$VR}),o($VX,[2,83],{74:$VQ,75:$VR}),{41:[1,162],43:[1,161]},o($VT,[2,96]),o($VY,[2,61],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{20:[1,165],40:[1,163],41:[1,164]},{50:[1,166]},{20:[1,167],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{20:[1,168],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VZ,[2,104],{26:$Vz,42:[1,169]}),o($VZ,[2,107]),o($VZ,[2,116],{26:$Vz,42:[1,170]}),o($VZ,[2,119]),{20:[1,171]},{26:[1,172]},{20:$V_,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,174],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{20:[1,175],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VZ,[2,108],{26:$Vz,42:[1,176]}),o($VZ,[2,111]),{27:[1,177],41:[1,178]},o($VZ,[2,125]),o($V$,[2,68],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($Vq,[2,24]),{36:[1,179]},{36:$V01,45:180,46:$V11,47:$V21,48:$V31,49:$V41},{19:98,21:97,22:96,26:$V2,31:186,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,25]),{38:[1,187]},{27:[1,188],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:[1,190],21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,50:[1,189],54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($V51,[2,71],{56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V51,[2,72],{56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V61,[2,73],{58:$VG,74:$VQ,75:$VR}),o($V61,[2,74],{58:$VG,74:$VQ,75:$VR}),o($VX,[2,75],{74:$VQ,75:$VR}),o($V61,[2,76],{58:$VG,74:$VQ,75:$VR}),o([20,27,40,41,43,50,62,63,85,95,96],[2,81],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o([20,27,40,41,43,50,63,85,95,96],[2,82],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($V71,[2,87],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V71,[2,88],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V71,[2,89],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V71,[2,90],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,74:$VQ,75:$VR}),o($V81,[2,91],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,68:$VK,69:$VL,70:$VM,71:$VN,74:$VQ,75:$VR}),o($V81,[2,92],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,68:$VK,69:$VL,70:$VM,71:$VN,74:$VQ,75:$VR}),{27:[1,191],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,192],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{91:[1,193]},{19:98,21:97,22:96,26:$V2,31:194,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,95:[1,195],96:[1,196]},{19:98,21:97,22:96,26:$V2,31:197,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{95:[1,198],96:[1,199]},{26:$Vz,29:$VA,37:[1,200],42:[1,201]},{29:$Vt,37:$Vu},{33:202,36:$VB},{29:$Vw},{27:[1,203],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vq,[2,129]),{19:98,21:97,22:96,26:$V2,31:204,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{27:[1,206],36:[1,207],80:205},o($VT,[2,69]),o($VT,[2,95]),{19:98,21:97,22:96,26:$V2,31:208,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VT,[2,97]),{36:[1,210],40:[1,209]},{40:[1,211]},{19:98,21:97,22:96,26:$V2,31:212,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V91,[2,32]),o($Vq,[2,36]),{19:98,21:97,22:96,26:$V2,31:213,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:214,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,21]),{19:98,21:97,22:96,26:$V2,31:215,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($V91,[2,29]),o($Vr,$Va1,{29:$Vb1,37:$Vc1,42:[1,217],44:[1,218]}),o($Vq,[2,33]),{19:98,21:97,22:96,26:$V2,31:220,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VZ,[2,124]),{19:98,21:97,22:96,26:$V2,31:221,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VW,[2,53],{37:[1,223],50:[1,222]}),o($VW,[2,54],{37:[1,224]}),o($Vd1,[2,37],{42:[1,225]}),o($Vd1,[2,38],{42:[1,226]}),o($Vd1,[2,39],{42:[1,227]}),o($Vd1,[2,40],{42:[1,228]}),o($Vd1,[2,41],{42:[1,229]}),o($VW,[2,59],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{36:[1,231],39:230},{38:[1,232]},{2:$V0,6:233,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,148]),{38:[1,234]},{91:[1,235]},{26:[1,236]},{20:[1,237],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{19:98,21:97,22:96,26:$V2,31:238,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:239,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:[1,240],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{19:98,21:97,22:96,26:$V2,31:241,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:242,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:243,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:244,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Ve1,[2,168],{20:$VU,41:$VV}),{38:[1,245]},{43:[1,246],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,247]},{50:[1,248]},{50:[1,249]},o($VY,[2,60],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($VT,[2,98]),{50:[1,250]},o($VT,[2,99]),o($Vf1,[2,66],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{43:[1,251],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,252],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,253],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{19:98,21:97,22:96,26:$V2,31:254,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:255,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:256,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{21:258,36:[1,257]},{43:[1,259],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($V$,[2,67],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{36:$V01,45:260,46:$V11,47:$V21,48:$V31,49:$V41},{19:98,21:97,22:96,26:$V2,31:261,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:262,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{43:[1,263]},{43:[1,264]},{43:[1,265]},{43:[1,266]},{43:[1,267]},{20:[1,270],40:[1,268],41:[1,269]},{50:[1,271]},{2:$V0,6:272,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,273],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:[1,274],21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,6:275,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,276],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{26:[1,277]},{19:98,21:97,22:96,26:$V2,31:278,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:279,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{27:[1,280],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,281],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{19:98,21:97,22:96,26:$V2,31:282,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{27:[1,283],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,284],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Ve1,[2,169],{20:$V_,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{43:[1,285],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{87:286,88:287,89:$Vg1,90:$Vh1},o($VT,$Va1,{29:$Vb1,42:[1,290]}),{50:[1,291]},{36:$V01,45:292,46:$V11,47:$V21,48:$V31,49:$V41},{36:$V01,45:293,46:$V11,47:$V21,48:$V31,49:$V41},{19:98,21:97,22:96,26:$V2,31:294,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($VZ,[2,105],{42:[1,295]}),o($VZ,[2,117],{42:[1,296]}),{20:[1,297]},{20:[1,298],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,299],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{20:[1,300],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VZ,[2,112],{26:$Vz,42:[1,301]}),o($VZ,[2,115]),o($VZ,[2,109],{42:[1,302]}),o($VW,[2,52],{37:[1,303]}),o($VW,[2,57],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($VW,[2,58],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($Vd1,[2,42],{42:[1,304]}),o($Vd1,[2,43],{42:[1,305]}),o($Vd1,[2,44],{42:[1,306]}),o($Vd1,[2,45],{42:[1,307]}),o($Vd1,[2,46],{42:[1,308]}),{20:[1,309]},{36:[1,311],40:[1,310]},{36:[1,313],40:[1,312]},{36:$V01,45:314,46:$V11,47:$V21,48:$V31,49:$V41},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,315],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,139],{83:316,84:$Vi1}),o($Vq,[2,147]),{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,318],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,157]),{19:98,21:97,22:96,26:$V2,31:319,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{27:[1,320],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{27:[1,321],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{38:[1,322]},{38:[1,323]},{27:[1,324],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{38:[1,325]},{38:[1,326]},{29:$Vb1,37:$Vc1,42:[1,327]},{40:[1,328],88:329,89:$Vg1,90:$Vh1},o($Vj1,[2,151]),{19:98,21:97,22:96,26:$V2,31:330,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{50:[1,331]},{19:98,21:97,22:96,26:$V2,31:332,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{36:$V01,45:333,46:$V11,47:$V21,48:$V31,49:$V41},{38:[1,334]},{27:$Vk1,41:$Vl1,81:335},o($Vf1,[2,65],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),{19:98,21:97,22:96,26:$V2,31:337,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:338,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,22]),o($V91,[2,30]),o($Vr,$Vm1,{29:$Vn1,37:$Vo1,44:[1,340]}),o($Vq,[2,34]),{19:98,21:97,22:96,26:$V2,31:342,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:343,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:344,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{43:[1,345]},{43:[1,346]},{43:[1,347]},{43:[1,348]},{43:[1,349]},o($Vq,[2,26]),{20:[1,350]},{50:[1,351]},{20:[1,352]},{50:[1,353]},o($Vf1,[2,64]),o($Vq,[2,137],{83:354,84:$Vi1}),o($Vq,[2,140]),{38:[1,355],82:[1,356]},o($Vq,[2,156]),{27:[1,357],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vq,[2,159]),{38:[1,358]},{2:$V0,6:359,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,6:360,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{38:[1,361]},{2:$V0,6:362,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,6:363,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{19:98,21:97,22:96,26:$V2,31:364,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,149]),o($Vj1,[2,150]),{50:[1,365],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vj1,[2,155],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,31:29,6:366,2:$V0,25:$V1,26:$V2,28:$V3,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp}),{43:[1,367],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{38:[1,368]},{2:$V0,6:369,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,370],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{27:[2,134]},{36:[1,371]},{43:[1,372],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,373],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{19:98,21:97,22:96,26:$V2,31:374,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:375,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{21:377,36:[1,376]},{43:[1,378],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,379],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VW,[2,56],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR}),o($Vd1,[2,47]),o($Vd1,[2,48]),o($Vd1,[2,49]),o($Vd1,[2,50]),o($Vd1,[2,51]),o($Vq,[2,27]),{36:$V01,45:380,46:$V11,47:$V21,48:$V31,49:$V41},o($Vq,[2,28]),{36:$V01,45:381,46:$V11,47:$V21,48:$V31,49:$V41},o($Vq,[2,138]),{2:$V0,6:382,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,383],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{26:[1,384]},o($Vq,[2,158]),{2:$V0,6:385,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,386],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,387],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,388],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,6:389,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,390],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,391],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,392],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{43:[1,393],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vj1,[2,154],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,31:29,6:394,2:$V0,25:$V1,26:$V2,28:$V3,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp}),o($Vj1,[2,153],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,31:29,7:49,2:$V0,25:$V1,26:$V2,28:$V3,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp}),o($VT,$Vm1,{29:$Vn1}),{2:$V0,6:395,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,396],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,397],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,133]),{50:[1,398]},o($VZ,[2,106]),o($VZ,[2,118]),{20:[1,399],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{20:[1,400],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($VZ,[2,120],{26:$Vz,42:[1,401]}),o($VZ,[2,123]),o($VZ,[2,113],{42:[1,402]}),o($VZ,[2,110]),o($Vf1,[2,62]),o($Vf1,[2,63]),{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,403],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,144]),{19:98,21:97,22:96,26:$V2,31:404,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,405],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,162]),o($Vq,[2,165]),o($Vq,[2,167]),{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,406],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,163]),o($Vq,[2,164]),o($Vq,[2,166]),{29:$Vn1,37:$Vo1},o($Vj1,[2,152],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,31:29,7:49,2:$V0,25:$V1,26:$V2,28:$V3,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp}),{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,407],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,132]),o($Vq,[2,131]),{36:$V01,45:408,46:$V11,47:$V21,48:$V31,49:$V41},o($V91,[2,31]),o($Vq,[2,35]),{19:98,21:97,22:96,26:$V2,31:409,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:98,21:97,22:96,26:$V2,31:410,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},o($Vq,[2,141]),{27:[1,411],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vq,[2,160]),o($Vq,[2,161]),o($Vq,[2,130]),{27:$Vk1,41:$Vl1,81:412},{43:[1,413],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{43:[1,414],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},{38:[1,415]},{27:[2,135]},o($VZ,[2,121],{42:[1,416]}),o($VZ,[2,114]),{2:$V0,6:417,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,418],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},{19:98,21:97,22:96,26:$V2,31:419,36:$VS,38:$V8,42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{2:$V0,7:49,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,21:17,22:18,23:19,24:20,25:$V1,26:$V2,28:$V3,31:29,32:$V4,34:$V5,35:$V6,36:$V7,38:$V8,40:[1,420],42:$V9,54:$Va,60:$Vb,61:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk,82:$Vl,86:$Vm,91:$Vn,92:$Vo,93:$Vp},o($Vq,[2,145],{83:421,84:$Vi1}),{43:[1,422],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,62:$VI,63:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR},o($Vq,[2,142],{83:423,84:$Vi1}),o($Vq,[2,146]),o($VZ,[2,122]),o($Vq,[2,143])],
defaultActions: {48:[2,1],335:[2,134],412:[2,135]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Tipo_Operacion	= require('./Instrucciones.js').Tipo_Operacion;
	const Tipo_Valor 	    = require('./Instrucciones.js').Tipo_Valor;
    const AST_Tools     	= require('./Instrucciones.js').AST_Tools;
    const Manejo_Errores    = require('./Instrucciones.js').Manejo_Errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"lex":true,"case-sensitive":true,"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar Espacios */
break;
case 1:/* Comentario Simple */
break;
case 2:/* Comentario Multiple */
break;
case 3:return 46;
break;
case 4:return 47;
break;
case 5:return 48;
break;
case 6:return 49;
break;
case 7:return 35;
break;
case 8:return 65
break;
case 9:return 66
break;
case 10:return 67
break;
case 11:return 32;
break;
case 12:return 34;
break;
case 13:return 75;
break;
case 14:return 74;
break;
case 15:return 44;
break;
case 16:return 'OPDIV';
break;
case 17:return 58;
break;
case 18:return 59;
break;
case 19:return 57;
break;
case 20:return 54;
break;
case 21:return 55;
break;
case 22:return 42;
break;
case 23:return 43;
break;
case 24:return 26;
break;
case 25:return 27;
break;
case 26:return 38;
break;
case 27:return 40;
break;
case 28:return 70;
break;
case 29:return 71;
break;
case 30:return 69;
break;
case 31:return 68;
break;
case 32:return 72;
break;
case 33:return 37;
break;
case 34:return 73;
break;
case 35:return 29;
break;
case 36:return 20;
break;
case 37:return 41;
break;
case 38:return 50;
break;
case 39:return 85;
break;
case 40:return 62;
break;
case 41:return 63;
break;
case 42:return 64;
break;
case 43:return 82;
break;
case 44:return 84;
break;
case 45:return 86;
break;
case 46:return 89;
break;
case 47:return 90;
break;
case 48:return 91;
break;
case 49:return 92;
break;
case 50:return 93;
break;
case 51:return 95;
break;
case 52:return 96;
break;
case 53:return 76;
break;
case 54:return 77;
break;
case 55:return 78;
break;
case 56:return 79;
break;
case 57:return 28;
break;
case 58:return 30;
break;
case 59:return 25;
break;
case 60: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 63:return 60
break;
case 64:return 36;
break;
case 65:return 5;
break;
case 66:Manejo_Errores.addErrorLexico(yy_.yytext,yy_.yylineno+1,yy_.yylloc.first_column);return''
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\"|[^\"])*')/,/^(?:`(\\"|[^\"])*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}